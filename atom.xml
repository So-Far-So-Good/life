<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Freelemon's open world]]></title>
  <subtitle><![CDATA[Write, Code, Share, Learn]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://hongbinzuo.github.io/"/>
  <updated>2014-11-08T05:12:45.773Z</updated>
  <id>http://hongbinzuo.github.io/</id>
  
  <author>
    <name><![CDATA[Hongbin Zuo]]></name>
    <email><![CDATA[zuohongbin@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ThreadLocal]]></title>
    <link href="http://hongbinzuo.github.io/2014/11/08/ThreadLocal/"/>
    <id>http://hongbinzuo.github.io/2014/11/08/ThreadLocal/</id>
    <published>2014-11-08T03:56:59.000Z</published>
    <updated>2014-11-08T05:12:21.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>当访问共享的可变数据时，通常需要使用同步。一种避免使用同步的方式就是不共享数据。如果仅在单线程内访问数据，就不需要同步。这种技术被称为线程封闭，它是实现线程安全性的最简单方式之一。……在Swing中大量使用了线程封闭技术。……线程封闭技术的另一种常见应用是JDBC的Connection对象。</p>
<p>Java语言及其核心库提供了一些机制来帮助维持线程封闭性，例如局部变量和ThreadLocal类，但即便如此，程序员仍然需要负责确保封闭在线程中的对象不会从线程中逸出。</p>
</blockquote>
<a id="more"></a>

<p><strong>线程封闭</strong>的实现方式分为：</p>
<ul>
<li><strong>Ad-hoc线程封闭</strong>：完全由程序实现来确保线程封闭性，非常脆弱。</li>
<li><strong>栈封闭</strong>：局部变量的固有属性之一就是封闭在执行线程中，它们位于执行线程的栈中，其他线程无法访问。比Ad-hoc更易于维护、更加健壮。需要注意的是基本类型的局部变量始终封闭在线程内（Java语言的语义保证），但是对象类型的局部变量则需要格外小心确保不会逸出。</li>
<li><strong>ThreadLocal类</strong>：这是维持线程封闭的规范方法。</li>
</ul>
<blockquote>
<p>这个类能使线程中的某个值与保存值的对象关联起来。ThreadLocal提供了get与set等访问接口或方法，这些方法为每个使用该变量的线程都存有一份独立的副本，因为get总是返回由当前执行线程在调用set时设置的最新值。</p>
</blockquote>
<p>下面是来自网上的一个例子，我稍微修改了一下，这样打印结果更容易理解：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</div><div class="line">        <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; threadLocal =</div><div class="line">                <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;();</div><div class="line"></div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">            <span class="keyword">int</span> myValue = (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>D);</div><div class="line">            System.out.println(Thread.currentThread().getName()</div><div class="line">                + <span class="string">": my value is set:"</span>+ myValue);</div><div class="line"></div><div class="line">            threadLocal.set(myValue);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">            }</div><div class="line"></div><div class="line">            System.out.println(Thread.currentThread().getName()</div><div class="line">                + <span class="string">": my value is:"</span>+ threadLocal.get());</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        MyRunnable sharedRunnableInstance = <span class="keyword">new</span> MyRunnable();</div><div class="line"></div><div class="line">        Thread thread1 = <span class="keyword">new</span> Thread(sharedRunnableInstance);</div><div class="line">        Thread thread2 = <span class="keyword">new</span> Thread(sharedRunnableInstance);</div><div class="line"></div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Thread-<span class="number">0</span>: my <span class="keyword">value</span> <span class="keyword">is</span> <span class="keyword">set</span>:<span class="number">95</span></div><div class="line">Thread-<span class="number">1</span>: my <span class="keyword">value</span> <span class="keyword">is</span> <span class="keyword">set</span>:<span class="number">27</span></div><div class="line">Thread-<span class="number">1</span>: my <span class="keyword">value</span> <span class="keyword">is</span>:<span class="number">27</span></div><div class="line">Thread-<span class="number">0</span>: my <span class="keyword">value</span> <span class="keyword">is</span>:<span class="number">95</span></div></pre></td></tr></table></figure>

<h3 id="参考资料">参考资料</h3>
<ul>
<li>文中引用部分摘自《Java并发编程实战》</li>
<li>例子代码来自：<a href="http://tutorials.jenkov.com/java-concurrency/threadlocal.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/threadlocal.html</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>当访问共享的可变数据时，通常需要使用同步。一种避免使用同步的方式就是不共享数据。如果仅在单线程内访问数据，就不需要同步。这种技术被称为线程封闭，它是实现线程安全性的最简单方式之一。……在Swing中大量使用了线程封闭技术。……线程封闭技术的另一种常见应用是JDBC的Connection对象。</p>
<p>Java语言及其核心库提供了一些机制来帮助维持线程封闭性，例如局部变量和ThreadLocal类，但即便如此，程序员仍然需要负责确保封闭在线程中的对象不会从线程中逸出。</p>
</blockquote>
]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="Concurrency" scheme="http://hongbinzuo.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Future]]></title>
    <link href="http://hongbinzuo.github.io/2014/11/07/Future/"/>
    <id>http://hongbinzuo.github.io/2014/11/07/Future/</id>
    <published>2014-11-07T12:04:44.000Z</published>
    <updated>2014-11-07T13:17:38.000Z</updated>
    <content type="html"><![CDATA[<p>之前在看《Java程序员修炼之道》（主要讲的是Java 7的新特性）的时候就看过并发这块儿，但是感觉看完过段儿时间印象也有点儿模糊。最近重温Java并发编程，拿起了《Java并发编程实战》，只能用四个字儿来形容：干货太多。书里讲的几乎没有废话，大部分例子也都不错，对于理解新的Java并发编程模型很有帮助。不过，也有些例子可能受篇幅所限，讲解的不够细致，所以我就需要从网上再找些相对丰富的例子补充上以加深理解。Future就是其中一例。</p>
<a id="more"></a>

<p>下面的代码段摘自<a href="http://java.dzone.com/articles/javautilconcurrentfuture" target="_blank" rel="external">java.util.concurrent.Future Basics</a>，感觉这篇教程讲解虽然基础但是很清晰，看看代码基本上就理解Future的简单用法了。</p>
<h3 id="单线程应用">单线程应用</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public String downloadContents(URL url) throws IOException {</div><div class="line">    <span class="keyword">try</span>(InputStream input = url.openStream()) {</div><div class="line">        <span class="keyword">return</span> IOUtils.toString(input, StandardCharsets.UTF_8);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">//<span class="keyword">...</span></div><div class="line"></div><div class="line">final String contents = downloadContents(new URL(<span class="string">"http://www.example.com"</span>));</div></pre></td></tr></table></figure>

<h3 id="使用Future接口，并行处理">使用Future接口，并行处理</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static Future&lt;String&gt; startDownloading(URL url) {</div><div class="line">    //<span class="keyword">...</span></div><div class="line">}</div><div class="line"></div><div class="line">final Future&lt;String&gt; contentsFuture = startDownloading(new URL(<span class="string">"http://www.example.com"</span>));</div><div class="line">//other computation</div><div class="line">final String contents = contentsFuture.get();</div></pre></td></tr></table></figure>

<h3 id="调用isDone方法判断是否执行完成">调用isDone方法判断是否执行完成</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Future&lt;String&gt; contentsFuture = startDownloading(<span class="keyword">new</span> URL(<span class="string">"http://www.example.com"</span>));</div><div class="line"><span class="keyword">while</span> (!contentsFuture.isDone()) {</div><div class="line">    askUserToWait();</div><div class="line">    doSomeComputationInTheMeantime();</div><div class="line">}</div><div class="line">contentsFuture.<span class="keyword">get</span>();</div></pre></td></tr></table></figure>

<h3 id="取消任务">取消任务</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">contentsFuture.<span class="built_in">cancel</span>(<span class="constant">true</span>);   <span class="comment"> //meh...</span></div></pre></td></tr></table></figure>

<h3 id="两种获得Future实例的方法">两种获得Future实例的方法</h3>
<h4 id="使用线程池">使用线程池</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">startDownloading</span>(<span class="keyword">final</span> URL url) <span class="keyword">throws</span> IOException {</div><div class="line">    <span class="keyword">return</span> pool.submit(<span class="keyword">new</span> Callable&lt;String&gt;() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> String <span class="title">call</span>() <span class="keyword">throws</span> Exception {</div><div class="line">            <span class="keyword">try</span> (InputStream input = url.openStream()) {</div><div class="line">                <span class="keyword">return</span> IOUtils.toString(input, StandardCharsets.UTF_8);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="使用容器，如Spring或EJB">使用容器，如Spring或EJB</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Async</span></div><div class="line"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">startDownloading</span>(<span class="keyword">final</span> URL url) <span class="keyword">throws</span> IOException {</div><div class="line">    <span class="keyword">try</span> (InputStream input = url.openStream()) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(</div><div class="line">                IOUtils.toString(input, StandardCharsets.UTF_8)</div><div class="line">        );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>代码实例能帮助理解，同时也要通读一下原文，注意其中的一些细节，比如超时和中断的处理逻辑等等。</p>
<p>最后，我们摘抄《Java并发实战》第7章的例子看看相对完整的一个取消操作是怎么完成的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> timedRun(Runnable r, <span class="keyword">long</span> timeout, TimeUnit unit) <span class="keyword">throws</span> InterruptedException {</div><div class="line">  Future&lt;?&gt; <span class="keyword">task</span> = taskExec.submit(r);</div><div class="line">  <span class="keyword">try</span> {</div><div class="line">    <span class="keyword">task</span>.get(timeout, unit);</div><div class="line">  } <span class="keyword">catch</span>(TimeoutException e) {</div><div class="line">    <span class="comment">// 接下来的任务将被取消</span></div><div class="line">  } <span class="keyword">catch</span>(ExecutionException e){</div><div class="line">    <span class="comment">// 如果在任务中抛出了异常，那么重新抛出异常</span></div><div class="line">    <span class="keyword">throw</span> launderThrowable(e.getCause());</div><div class="line">  } <span class="keyword">finally</span> {</div><div class="line">    <span class="comment">// 如果任务已经结束，那么执行取消操作也不会带来任何影响</span></div><div class="line">    <span class="comment">// 如果任务正在运行，那么将被中断</span></div><div class="line">    <span class="keyword">task</span>.cancel(<span class="keyword">true</span>);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="参考资源">参考资源</h3>
<ul>
<li><a href="http://www.cnblogs.com/hanyuan/archive/2013/03/10/2952229.html" target="_blank" rel="external">http://www.cnblogs.com/hanyuan/archive/2013/03/10/2952229.html</a></li>
<li><a href="http://blog.csdn.net/lingchixin/article/details/38906849" target="_blank" rel="external">http://blog.csdn.net/lingchixin/article/details/38906849</a></li>
<li><a href="http://10kloc.wordpress.com/2013/12/24/cancelling-tasks-in-executors/" target="_blank" rel="external">http://10kloc.wordpress.com/2013/12/24/cancelling-tasks-in-executors/</a></li>
<li><a href="http://www.javacodegeeks.com/2011/09/java-concurrency-tutorial-callable.html" target="_blank" rel="external">http://www.javacodegeeks.com/2011/09/java-concurrency-tutorial-callable.html</a></li>
<li><a href="http://www.journaldev.com/1090/java-callable-future-example" target="_blank" rel="external">http://www.journaldev.com/1090/java-callable-future-example</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>之前在看《Java程序员修炼之道》（主要讲的是Java 7的新特性）的时候就看过并发这块儿，但是感觉看完过段儿时间印象也有点儿模糊。最近重温Java并发编程，拿起了《Java并发编程实战》，只能用四个字儿来形容：干货太多。书里讲的几乎没有废话，大部分例子也都不错，对于理解新的Java并发编程模型很有帮助。不过，也有些例子可能受篇幅所限，讲解的不够细致，所以我就需要从网上再找些相对丰富的例子补充上以加深理解。Future就是其中一例。</p>
]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="Concurrency" scheme="http://hongbinzuo.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hibernate Object States]]></title>
    <link href="http://hongbinzuo.github.io/2014/11/07/Hibernate-Object-States/"/>
    <id>http://hongbinzuo.github.io/2014/11/07/Hibernate-Object-States/</id>
    <published>2014-11-07T05:26:34.000Z</published>
    <updated>2014-11-07T06:20:38.000Z</updated>
    <content type="html"><![CDATA[<p>Hibernate是一种对象/关系映射的持久化框架，它做的主要工作之一就是对象和数据库表记录之间的状态管理。Hibernate编程环境中操作的对象指的是Entity POJO对象，它存在四种状态：Transient, Persistent, Detached和Removed。下面是从网上摘录的一幅图（源自Java Persistence with Hibernate这本书），非常好地说明了这几种状态之间的转换关系。</p>
<p><a id="more"></a><br><img alt="Hibernate对象状态转换图" src="/img/object-states.JPG" style="width: 750px;"></p>
<p>从这幅图中，我们可以看到，</p>
<ul>
<li>对象刚刚创建时是Transient（瞬时）状态，意味着和数据库没有任何关系，只在内存中存在</li>
<li>对象在保存或更新之后，进入Persistent（持久化）状态，此时数据库中已经有对象相应的记录，并生成了ID</li>
<li>当调用Session的clear等方法后，对象从Persistent进入Detached状态，此时Hibernate从<strong>缓存</strong>中将此对象清除，但在数据库中依然存在</li>
<li>Detached状态和Persistent状态可以相互转换，如图所示，如果保存更新对象，对象又从Detached状态进入Persistent状态</li>
<li>也可以通过load或get方法从数据库中获取该对象，从而直接进入Persistent状态</li>
<li>最后，调用Session的delete方法，对象就进入了不可逆转的Removed状态</li>
</ul>
<p>其实，这些状态变化还是比较符合常理的，所以只要了解基本原理，然后就可以写写代码验证即可。</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="http://learningviacode.blogspot.com/2012/02/hibernate-object-life-cycle.html" target="_blank" rel="external">The Hibernate Object Life-Cycle</a></li>
<li><a href="http://www.roseindia.net/hibernate/HibernateLifeCycle.shtml" target="_blank" rel="external">Hibernate Life Cycle</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>Hibernate是一种对象/关系映射的持久化框架，它做的主要工作之一就是对象和数据库表记录之间的状态管理。Hibernate编程环境中操作的对象指的是Entity POJO对象，它存在四种状态：Transient, Persistent, Detached和Removed。下面是从网上摘录的一幅图（源自Java Persistence with Hibernate这本书），非常好地说明了这几种状态之间的转换关系。</p>
<p>]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="Hibernate" scheme="http://hongbinzuo.github.io/tags/Hibernate/"/>
    
      <category term="JavaEE" scheme="http://hongbinzuo.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A tip for Ubuntu 14.04 update]]></title>
    <link href="http://hongbinzuo.github.io/2014/11/07/A-tip-for-Ubuntu-1404-update/"/>
    <id>http://hongbinzuo.github.io/2014/11/07/A-tip-for-Ubuntu-1404-update/</id>
    <published>2014-11-06T17:14:41.000Z</published>
    <updated>2014-11-06T17:20:41.000Z</updated>
    <content type="html"><![CDATA[<p>安装了Ubuntu 14.04之后，出现一个小问题，软件自动更新时经常提示空间不足。搜一下，下面的链接提供了一些解决方案。<br><a href="http://askubuntu.com/questions/2793/how-do-i-remove-or-hide-old-kernel-versions-to-clean-up-the-boot-menu" target="_blank" rel="external">http://askubuntu.com/questions/2793/how-do-i-remove-or-hide-old-kernel-versions-to-clean-up-the-boot-menu</a></p>
<p>简单说想快速解决就是一条命令：<br><code>sudo apt-get remove --purge $(dpkg -l &#39;linux-image-*&#39; | sed &#39;/^ii/!d;/&#39;&quot;$(uname -r | sed &quot;s/\(.*\)-\([^0-9]\+\)/\1/&quot;)&quot;&#39;/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d&#39;)</code></p>
<p>这条命令会移除所有除了当前版本之外所有旧的Kernel安装包，以腾出空间。当然，如果想要彻底解决这个问题，可以参考上面的文章。</p>
]]></content>
    
    
      <category term="Ubuntu" scheme="http://hongbinzuo.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hibernate Core API]]></title>
    <link href="http://hongbinzuo.github.io/2014/11/06/Hibernate-Core-API/"/>
    <id>http://hongbinzuo.github.io/2014/11/06/Hibernate-Core-API/</id>
    <published>2014-11-06T13:11:49.000Z</published>
    <updated>2014-11-06T17:12:44.000Z</updated>
    <content type="html"><![CDATA[<p>整理一下Hibernate核心API的笔记，感谢马老师。因为博客的发布形式，中间内容有些节略和修改。</p>
<h2 id="关于API文档">关于API文档</h2>
<p>因为Hibernate是属于JBoss的，按照JBoss的商业模式，文档和技术支持是收费的，所以官方不提供离线文档下载，只提供在线文档查看。当然，总有热心的网友看不过去，所以网上有非官方整理的API文档可供参考。</p>
<a id="more"></a>

<h2 id="Configuration">Configuration</h2>
<ul>
<li>AnnotationConfiguration 基于注解的配置</li>
<li>配置信息管理</li>
<li>用来产生SessionFactory</li>
<li>可以在configure方法中指定Hibernate配置文件</li>
<li>只关注一个方法即可：buildSessionFactory</li>
</ul>
<h2 id="SessionFactory">SessionFactory</h2>
<ul>
<li>用来产生和管理Session</li>
<li>通常情况下，每个应用只需要一个SessionFactory （单例），除非要访问多个数据库</li>
<li>关注两个方法即可<ul>
<li>openSession每次都是新的，需要close</li>
<li>getCurrentSession从上下文找，如果有，用已有的，否则，创建新的<ul>
<li>用途，界定事务边界</li>
<li>事务提交后自动close</li>
<li>上下文配置可参见XML文件中<code>current_session_context_classs</code>属性</li>
<li><code>current_session_context_classs</code>属性取值JTA和thread常用，managed和custom.class较少使用<ul>
<li>thread：使用Connection连接的数据库管理事务</li>
<li>JTA（Java Transaction API）：Java分布式事务管理（多数据库访问），JTA由中间件提供（JBoss、Weblogic等，Tomcat不支持）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Session">Session</h2>
<ul>
<li>管理一个数据库的任务单元（简单说就是增删改查），中文名为“会话”</li>
<li>方法（CRUD）<ul>
<li>Save <code>session.save(对象)</code></li>
<li>Delete <code>session.delete(对象)</code></li>
<li>Load <code>Student s1=(Student)session.load(Student.class, 1);</code></li>
<li>Get <code>Student s1=(Student)session.get(Student.class, 1);</code></li>
<li>Get与Load的区别（原理，面试重点）<ul>
<li>不存在对应记录时表现不一样</li>
<li>Load返回的是代理对象,等到真正用到对象内容时才发出SQL语句</li>
<li>Get直接从数据库加载不会延迟</li>
</ul>
</li>
<li>Update <code>session.update(对象)</code><ul>
<li>用来更新detached对象，更新完成后转为persistent</li>
<li>更新transient对象会报错</li>
<li>更新自己设定ID的transient对象可以（数据库有对应记录）</li>
<li>persistent状态的对象只要设定（如:t.setName…）不同字段就会更新</li>
<li>更新部分更改的字段<ul>
<li>XML配置文件中设定property标签的update属性，annotation设定 @Column 的 updatable属性，不过这种方式很少用，因为不灵活</li>
<li>使用XML中的dynamic-update，JPA1.0 Annotation 没有对应的属性，可能为Hibernate扩展</li>
<li>同一个session可以，跨session不行，不过可以用merge()(不重要）</li>
</ul>
</li>
<li>建议使用HQL(EJBQL)</li>
</ul>
</li>
<li>saveOrUpdate方法</li>
<li>clear方法<ul>
<li>无论是load还是get,都会首先査找缓存（一级缓存)，如果没有，才会去数据库査找，调用clear()方法可以强制清除session缓存</li>
</ul>
</li>
<li>flush方法<ul>
<li>当session的事务提交后,会强制将内存(session缓存)与数据库同步。默认情况下是session的事务提交(commit)时才同步!</li>
<li>session的FlushMode设置,可以设定在什么时候同步缓存与数据库(很少用)，例如: <code>session.setFlushMode(FlushMode.AUTO)</code></li>
</ul>
</li>
<li>find方法已过时</li>
</ul>
</li>
</ul>
<h2 id="SchemaExport_(自动建表)">SchemaExport (自动建表)</h2>
<ul>
<li>了解使用方法即可：<code>new SchemaExport(new AnnotationConfiguration().configure()).create(false, true);</code></li>
</ul>
<h2 id="查询接口">查询接口</h2>
<ul>
<li>参考Hibernate査询(HQL/EJBQL)的内容</li>
</ul>
<h2 id="注意">注意</h2>
<ul>
<li>Hibernate中涉及很多非常细节的区别,但在实际应用中用得极少<ul>
<li>比如save和persist的区别</li>
<li>merge、evict 等方法</li>
<li>比如 refresh、lock 等</li>
</ul>
</li>
<li>建议的学习方法，动手实验</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>整理一下Hibernate核心API的笔记，感谢马老师。因为博客的发布形式，中间内容有些节略和修改。</p>
<h2 id="关于API文档">关于API文档</h2>
<p>因为Hibernate是属于JBoss的，按照JBoss的商业模式，文档和技术支持是收费的，所以官方不提供离线文档下载，只提供在线文档查看。当然，总有热心的网友看不过去，所以网上有非官方整理的API文档可供参考。</p>
]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="JavaEE" scheme="http://hongbinzuo.github.io/tags/JavaEE/"/>
    
      <category term="Hibernate" scheme="http://hongbinzuo.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Top 8 free readings]]></title>
    <link href="http://hongbinzuo.github.io/2014/09/10/Top-8-free-readings/"/>
    <id>http://hongbinzuo.github.io/2014/09/10/Top-8-free-readings/</id>
    <published>2014-09-10T15:29:54.000Z</published>
    <updated>2014-09-10T17:13:28.000Z</updated>
    <content type="html"><![CDATA[<p>这是一个“信息大爆炸”的时代，在没有互联网的时候说这句话可能有人会怀疑，但是有了互联网之后大家都深信不疑。根据加州大学圣地亚哥分校的研究，一个典型的美国家庭在2008年平均收到3.6 ZB的信息，每人每天平均收到34 GB的信息，这只是2008年的研究结果，有人预测，每5年全世界的信息总量就会增加10倍。网络新闻、社交网络、邮箱、电视以及各种媒体每天都充斥你的左右，你是否也有信息焦虑症和选择困难症呢？</p>
<a id="more"></a>

<p>作为程序员，我们是天生的“学习者”，面对日新月异的新思想、新技术，我们主动或被动地获取相关的信息和知识以充实我们的大脑，完善自己的知识架构。信息技术领域变化飞快，这就要求我们能够高效地学习，如果只是盲目地在网络上左看右看，虽然能够找到有趣的内容，但难免会浪费很多时间，得不偿失。为了应对这个问题，下面列出8个适合程序员学习的聚合资源或垂直社区，可以帮助有效定位相关知识，大家各取所需吧（排名不分先后）。</p>
<h3 id="学习资源">学习资源</h3>
<h4 id="码农周刊">码农周刊</h4>
<p>由<a href="http://weibo.com/developerworks" target="_blank" rel="external">developerWorks</a>（微博帐号，应该不是IBM开发网络的官方帐号，只是名字碰巧相同）运营的码农周刊，可以通过邮件订阅，有时也发日报，个人觉得日报有点儿过头了，周刊都不一定能及时看完，推荐周刊。技术文章有分类，也有一些不影响阅读的广告和职位招聘信息。地址：<a href="http://weekly.manong.io/" target="_blank" rel="external">http://weekly.manong.io/</a></p>
<h4 id="Get新知社区">Get新知社区</h4>
<p>由<a href="http://weibo.com/easy" target="_blank" rel="external">Easy</a>（微博帐号）主导运营、新近才开张的一个学习型社区。个人感觉界面比较清新舒适，加上Easy本人技术能力过硬，推荐的资源（有些是他自己写的）一般比较靠谱。地址：<a href="http://get.jobdeer.com/" target="_blank" rel="external">http://get.jobdeer.com/</a></p>
<h4 id="Startup_News">Startup News</h4>
<p>由<a href="http://weibo.com/fenng" target="_blank" rel="external">Fenng</a>（丁香园CTO、小道消息出品人）运营的Startup News在程序员圈里也算小有名气，算是<a href="https://news.ycombinator.com/" target="_blank" rel="external">Hackernews</a>的中国版吧，质量方面前一阵Fenng曾经整顿过，因为属于聚合资源，所以自己要有点鉴别能力。地址：<a href="http://news.dbanotes.net/" target="_blank" rel="external">http://news.dbanotes.net/</a></p>
<h4 id="好东西传送门">好东西传送门</h4>
<p>由<a href="http://weibo.com/xiguadawanzitang" target="_blank" rel="external">西瓜大丸子汤</a>（微博帐号）主导运营、也是新开张的在线收藏列表。界面上设计感不强，但也算流畅，博主本人也是技术牛人，所以质量方面还是可以保证的。地址：<a href="http://hao.memect.com/" target="_blank" rel="external">http://hao.memect.com/</a></p>
<h4 id="极客头条">极客头条</h4>
<p>由CSDN运营的极客头条，我自己看的不多，但毕竟是中国最大的程序员开发网络出品，呵呵，所以，还是要关注一下。地址：<a href="http://geek.csdn.net/" target="_blank" rel="external">http://geek.csdn.net/</a></p>
<h4 id="《架构师》期刊">《架构师》期刊</h4>
<p>Infoq官方出品，有深度、有广度、干货多，不容易消化，一般都不是入门级教程，95后年轻程序员慎入。地址：<a href="http://www.infoq.com/cn/architect/" target="_blank" rel="external">http://www.infoq.com/cn/architect/</a></p>
<h4 id="《码农》期刊">《码农》期刊</h4>
<p>相比《架构师》，《码农》这个名字有点自嘲的意思，有的猿媛不喜欢这个称呼，认为有点自轻自贱，其实认真你就输了。推荐你听一下Beyond的<a href="http://music.163.com/#/song?id=347502" target="_blank" rel="external">《农民》</a>，也许你感觉就不一样了。地址：<a href="http://www.ituring.com.cn/book/tagged/1735" target="_blank" rel="external">http://www.ituring.com.cn/book/tagged/1735</a></p>
<h4 id="《编程狂人》期刊">《编程狂人》期刊</h4>
<p>推酷推出的期刊，我没有仔细看过，等我看完之后补一点感受，第一印象还可以。地址：<a href="http://www.tuicool.com/mags" target="_blank" rel="external">http://www.tuicool.com/mags</a></p>
<h3 id="Bonus">Bonus</h3>
<h4 id="Ourcoders">Ourcoders</h4>
<p>由tiny叔（大家都这么叫）运营的“我们是猿媛”是程序员的交流社区，无聊或苦闷的时候上去聊聊吧：<a href="http://ourcoders.com/home/" target="_blank" rel="external">http://ourcoders.com/home/</a></p>
<h4 id="v2ex">v2ex</h4>
<p>Way to explore，也是一个交流社区，挺好玩的，学习枯燥的时候上去扯一扯愉悦身心：<a href="http://v2ex.com" target="_blank" rel="external">http://v2ex.com</a></p>
<h3 id="后记">后记</h3>
<p>这篇文章主要是收集一些中文的轻量级学习资源，虽说是轻量级，如果学习没有方向和重点也是“乱花渐欲迷人眼”，所以还是要找准方向，专注而后精进，才能学有小成。祝大家学习愉快！</p>
<h3 id="参考资源">参考资源</h3>
<ul>
<li><a href="http://blog.sciencenet.cn/blog-50350-301466.html" target="_blank" rel="external">http://blog.sciencenet.cn/blog-50350-301466.html</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>这是一个“信息大爆炸”的时代，在没有互联网的时候说这句话可能有人会怀疑，但是有了互联网之后大家都深信不疑。根据加州大学圣地亚哥分校的研究，一个典型的美国家庭在2008年平均收到3.6 ZB的信息，每人每天平均收到34 GB的信息，这只是2008年的研究结果，有人预测，每5年全世界的信息总量就会增加10倍。网络新闻、社交网络、邮箱、电视以及各种媒体每天都充斥你的左右，你是否也有信息焦虑症和选择困难症呢？</p>
]]></summary>
    
      <category term="learning" scheme="http://hongbinzuo.github.io/tags/learning/"/>
    
      <category term="reading" scheme="http://hongbinzuo.github.io/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis setup]]></title>
    <link href="http://hongbinzuo.github.io/2014/09/06/Redis-setup/"/>
    <id>http://hongbinzuo.github.io/2014/09/06/Redis-setup/</id>
    <published>2014-09-06T03:42:09.000Z</published>
    <updated>2014-09-09T14:33:03.000Z</updated>
    <content type="html"><![CDATA[<p>Redis是一个非常流行的No-SQL数据库，在互联网网站的技术架构中应用相当广泛。这几天通过阅读《Redis in action》学习Redis，准备用博客简单记录一些有用的信息，以供未来参考。第一篇是Redis的开发环境搭建，这里使用的是书中推荐的Python开发环境，整个搭建过程比较简单。</p>
<a id="more"></a>

<h3 id="更新构建工具">更新构建工具</h3>
<p>因为Redis是用C写的，我们将使用源码编译的方式安装Redis，所以可以使用如下命令（适用于Debian Linux）更新构建工具：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install <span class="keyword">make</span> gcc <span class="keyword">python</span>-dev</div></pre></td></tr></table></figure>

<h3 id="下载源码包并安装">下载源码包并安装</h3>
<p>从Redis官网下载最新稳定的安装包，如2.8.14并编译安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="char">$ </span>wget <span class="method">http:</span>//download.redis.io/releases/redis-<span class="number">2.8</span><span class="number">.14</span>.tar.gz</div><div class="line"><span class="char">$ </span>tar xzf redis-<span class="number">2.8</span><span class="number">.14</span>.tar.gz</div><div class="line"><span class="char">$ </span>cd redis-<span class="number">2.8</span><span class="number">.14</span></div><div class="line"><span class="char">$ </span>make</div><div class="line"><span class="char">$ </span>sudo make install</div></pre></td></tr></table></figure>

<p>安装完成之后，启动Redis：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-server redis.<span class="keyword">conf</span></div></pre></td></tr></table></figure>

<p>我使用的操作系统是Ubuntu 14.04，系统已经默认安装了Python 2.7，所以只需要安装Redis的Python客户端开发库就可以了。我们使用Python的简易包安装工具<code>setuptools</code>来帮助我们安装。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="char">$ </span>wget -q <span class="method">http:</span>//peak.telecommunity.com/dist/ez_setup.py</div><div class="line"><span class="char">$ </span>sudo python ez_setup.py</div><div class="line"><span class="char">$ </span>sudo python -m easy_install redis hiredis</div></pre></td></tr></table></figure>

<p>注意，如果是通过代理上网的话，需要在<code>sudo</code>时带上环境，即：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo -E <span class="keyword">python</span> ez_setup.<span class="keyword">py</span></div><div class="line">$ sudo -E <span class="keyword">python</span> -<span class="keyword">m</span> easy_install redis hiredis</div></pre></td></tr></table></figure>

<h3 id="验证安装结果">验证安装结果</h3>
<p>最后我们简单测试一下安装是否正常：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">$ python</span></span></div><div class="line">Python 2.7.6 (default, Mar 22 2014, 22:59:56)</div><div class="line">[GCC 4.8.2] on linux2</div><div class="line">Type "help", "copyright", "credits" or "license" for more information.</div><div class="line">&gt;&gt;&gt; import redis</div><div class="line"><span class="input"><span class="prompt">&gt;&gt;&gt;</span> conn = redis.<span class="constant">Redis</span>()</span></div><div class="line"><span class="input"><span class="prompt">Create a connection to Redis.</span></span></div><div class="line">&gt;&gt;&gt; conn.set(<span class="string">'hello'</span>, <span class="string">'world'</span>)</div><div class="line"><span class="input"><span class="prompt">True</span></span></div><div class="line">&gt;&gt;&gt; conn.get(<span class="string">'hello'</span>)</div><div class="line"><span class="constant">Get</span> the value</div><div class="line"><span class="string">'world'</span></div></pre></td></tr></table></figure>

<p>一切OK。至此，Redis服务器和Python开发环境搭建成功。</p>
<h3 id="参考资源">参考资源</h3>
<ul>
<li><a href="http://superuser.com/questions/258819/easy-install-will-not-connect-through-proxy" target="_blank" rel="external">easy install will not connect through proxy</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>Redis是一个非常流行的No-SQL数据库，在互联网网站的技术架构中应用相当广泛。这几天通过阅读《Redis in action》学习Redis，准备用博客简单记录一些有用的信息，以供未来参考。第一篇是Redis的开发环境搭建，这里使用的是书中推荐的Python开发环境，整个搭建过程比较简单。</p>
]]></summary>
    
      <category term="Redis" scheme="http://hongbinzuo.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Prototype in Javascript]]></title>
    <link href="http://hongbinzuo.github.io/2014/08/14/Prototype-in-Javascript/"/>
    <id>http://hongbinzuo.github.io/2014/08/14/Prototype-in-Javascript/</id>
    <published>2014-08-14T15:03:20.000Z</published>
    <updated>2014-08-14T16:03:54.000Z</updated>
    <content type="html"><![CDATA[<p>最近又有机会重新学习了一下Javascript的基础语法，越发觉得这门语言和传统的、面向对象的静态类型语言的区别很明显。多语言使用者经常出现的问题就是使用A语言写出B语言风格的程序，这种情况屡见不鲜——话说我写Java风格的C++程序也是非常流畅的。</p>
<p>Javascript语言基础里有两个特性我觉得值得深入了解一下，分别是原型（Prototype）和闭包（Closure）。当然，Javascript也有很多其他高级特性比如函数式编程，也许以后有机会我们可以深入探究一下。今天主要看一下Javascript里原型式继承是怎么做的。</p>
<a id="more"></a>

<p>首先，我们使用几份材料来学习Javascript原型的概念以及原型式继承的方式（排序难易程度不分先后）：</p>
<ul>
<li><a href="http://www.slideshare.net/PaweDorofiejczyk/lets-javascript" target="_blank" rel="external">http://www.slideshare.net/PaweDorofiejczyk/lets-javascript</a> （学习Javascript语言基础的首选）</li>
<li><a href="http://blog.vjeux.com/2011/javascript/how-prototypal-inheritance-really-works.html" target="_blank" rel="external">http://blog.vjeux.com/2011/javascript/how-prototypal-inheritance-really-works.html</a> （原型式继承的深入讲解）</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html</a> （阮一峰老师当然不能放过）</li>
<li><a href="http://www.w3schools.com/js/js_object_prototypes.asp" target="_blank" rel="external">http://www.w3schools.com/js/js_object_prototypes.asp</a> （学习基本概念）</li>
<li><a href="http://coolshell.cn/articles/6441.html" target="_blank" rel="external">http://coolshell.cn/articles/6441.html</a> （耗子叔叔大作，推荐阅读）</li>
</ul>
<p>如果上述幻灯片或文章你都能一扫而过、微微一笑而且嘴角上扬的话，就不用往下看了。如果你居然还微微皱了一下眉头，那么我们可以用第一个幻灯片的例子来说明一下类继承和原型式继承的差别：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 类继承: 不推荐，丑陋</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span><span class="params">(name)</span></span>{</div><div class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// this指向构造函数返回的实例对象</span></div><div class="line">}</div><div class="line"></div><div class="line">Animal.prototype.getName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> dophin = <span class="keyword">new</span> Animal(<span class="string">"Dophin"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"A new Animal is created: "</span> + dophin.getName());</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WalkingAnimal</span><span class="params">(name)</span></span>{</div><div class="line">        <span class="comment">// 调用“父”对象构造函数</span></div><div class="line">        Animal.call(<span class="keyword">this</span>, name)</div><div class="line">}</div><div class="line"></div><div class="line">WalkingAnimal.prototype = <span class="keyword">new</span> Animal();</div><div class="line">WalkingAnimal.prototype.walk = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName() + <span class="string">" is walking"</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> cow = <span class="keyword">new</span> WalkingAnimal(<span class="string">'Cow'</span>);</div><div class="line">cow.getName(); <span class="comment">// 来自Animal.prototype.getName()</span></div><div class="line">cow.walk(); <span class="comment">// WalkingAnimal自己的prototype函数</span></div></pre></td></tr></table></figure>

<p>在改用原型式继承之后，就不用new Animal对象了，而是用下面的语句表达，这样是不是显得“原型”一些？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WalkingAnimal.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</div><div class="line">WalkingAnimal.prototype.walk = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName() + <span class="string">" is walking"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而在最近的Javascript语言风格中，可以看见类似如下的写法（使用NodeJS语法），</p>
<figure class="highlight javacript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义子对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WalkingAnimal</span><span class="params">(name)</span></span>{</div><div class="line">        <span class="comment">// 调用“父”对象构造函数</span></div><div class="line">        <span class="comment">// 使用super_而不是$parent</span></div><div class="line">        WalkingAnimal.super_.call(<span class="keyword">this</span>,name);</div><div class="line">}</div><div class="line"></div><div class="line">util.inherits(WalkingAnimal, Animal);</div><div class="line"></div><div class="line">WalkingAnimal.prototype.walk = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName() + <span class="string">" is walking"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样就更符合原型式继承的写法了，不过这里有两个问题需要进一步研究一下：</p>
<ul>
<li>Javascript语言规范的通常写法是什么</li>
<li>原型式继承其实是使用原型做一个代理，最终将“对象定义”传播到子对象，这样做除了风格区别还有什么优势？</li>
</ul>
<p>总结：文中我没有具体解释原型的概念，反而使用一些经典的参考资料比较阅读并结合实例说明原型式继承的写法，希望通过这样的学习更能加深印象。</p>
]]></content>
    <summary type="html"><![CDATA[<p>最近又有机会重新学习了一下Javascript的基础语法，越发觉得这门语言和传统的、面向对象的静态类型语言的区别很明显。多语言使用者经常出现的问题就是使用A语言写出B语言风格的程序，这种情况屡见不鲜——话说我写Java风格的C++程序也是非常流畅的。</p>
<p>Javascript语言基础里有两个特性我觉得值得深入了解一下，分别是原型（Prototype）和闭包（Closure）。当然，Javascript也有很多其他高级特性比如函数式编程，也许以后有机会我们可以深入探究一下。今天主要看一下Javascript里原型式继承是怎么做的。</p>
]]></summary>
    
      <category term="Javascript" scheme="http://hongbinzuo.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manacher]]></title>
    <link href="http://hongbinzuo.github.io/2014/08/13/Manacher/"/>
    <id>http://hongbinzuo.github.io/2014/08/13/Manacher/</id>
    <published>2014-08-13T11:14:43.000Z</published>
    <updated>2014-08-13T21:11:43.000Z</updated>
    <content type="html"><![CDATA[<p>最近在研究算法，今天重点学习了一下Manacher算法（俗称“马拉车”算法，也即<a href="http://en.wikipedia.org/wiki/Longest_palindromic_substring" target="_blank" rel="external">最长回文子串问题</a>的最佳解法），不禁为算法发明者拍案叫绝。算法的精巧之处在于充分利用了原问题的关键信息：回文串。</p>
<p>前段时间参加了<a href="http://weibo.com/julyweibo" target="_blank" rel="external">July</a>组织的算法班，遗憾的是当时算法的基础并不好没听透，所以现在只好重听一下邹博的讲课录音，听完之后似乎明白又似乎不太明白，囧。把原C++程序改成成Java代码之后，Exception退出，囧++。智商已成事实，只好使用网络搜索大法，力求加深理解。在找了一些博客之后，略感失望，可能不是人家讲得不清楚，而是自己理解能力有限吧，不过为了参考方便，还是列举如下：<br><a id="more"></a></p>
<ul>
<li><a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/10/04/2711527.html" target="_blank" rel="external">http://www.cnblogs.com/biyeymyhjob/archive/2012/10/04/2711527.html</a></li>
<li><a href="http://www.felix021.com/blog/read.php?2040" target="_blank" rel="external">http://www.felix021.com/blog/read.php?2040</a></li>
<li><a href="http://blog.csdn.net/ggggiqnypgjg/article/details/6645824" target="_blank" rel="external">http://blog.csdn.net/ggggiqnypgjg/article/details/6645824</a></li>
<li><a href="http://zhuhongcheng.wordpress.com/2009/08/02/a-simple-linear-time-algorithm-for-finding-longest-palindrome-sub-string/" target="_blank" rel="external">http://zhuhongcheng.wordpress.com/2009/08/02/a-simple-linear-time-algorithm-for-finding-longest-palindrome-sub-string/</a></li>
<li><a href="http://programmingpraxis.com/2010/10/15/find-the-longest-palindrome-in-a-string/" target="_blank" rel="external">http://programmingpraxis.com/2010/10/15/find-the-longest-palindrome-in-a-string/</a></li>
</ul>
<p>最后，经过一番比较之后，我还是觉着LeetCode上一篇文章写得不错，尤其是配图特别适合初学者理解。细读之后，感觉比较通透，将其C++代码转译成Java代码，也运行流畅。用几个字符串进行试验，结果正确，思路也逐渐清晰了。Leetcode上作者有两篇文章，第一篇讲的是最长回文子串的其他解法，包括暴力法、动态规划等，但都达不到O(N)的时间复杂度，在第二篇文章中作者重点讲解了唯一能达到O(N)的Manacher算法，算法本身很短，而其精要处也就那么两行。LeetCode的参考链接：</p>
<ul>
<li><a href="http://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html" target="_blank" rel="external">http://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html</a></li>
</ul>
<p>从Manacher算法学到的一个重要原则就是，如邹博所说，假设我们知道了前i项的解，那是不是对我们求解第i+1项有所帮助呢？:)</p>
<p>附Java代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manacher</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){</div><div class="line">        Manacher.testGetLongestPalindrome(<span class="string">"babcbabcbabcxa"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">preProcess</span>(String s){</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"^$"</span>;</div><div class="line">        String result = <span class="string">"^"</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</div><div class="line">            result += <span class="string">"#"</span> + s.charAt(i);</div><div class="line">        }</div><div class="line"></div><div class="line">        result += <span class="string">"#$"</span>;</div><div class="line">        <span class="keyword">return</span>  result;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testPreProcess</span>(String testStr){</div><div class="line">        String result = Manacher.preProcess(testStr);</div><div class="line">        System.out.print(result);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGetLongestPalindrome</span>(String testStr){</div><div class="line">        String result = Manacher.getLongestPalindrome(testStr);</div><div class="line">        System.out.print(result);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// the original implementation in C/C++</span></div><div class="line">    <span class="comment">// the source: http://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLongestPalindrome</span>(String s){</div><div class="line">        <span class="keyword">char</span>[] T = preProcess(s).toCharArray();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> n = T.length;</div><div class="line">        <span class="keyword">int</span>[] P = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> C = <span class="number">0</span>, R = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n-<span class="number">1</span>; i++) {</div><div class="line">            <span class="keyword">int</span> i_mirror = <span class="number">2</span>*C - i; <span class="comment">// equals to i' = C - (i-C)</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( i &lt; R ) {</div><div class="line">                P[i] = Math.min(R-i, P[i_mirror]);</div><div class="line">            } <span class="keyword">else</span>{</div><div class="line">                P[i] = <span class="number">0</span>;</div><div class="line">            }</div><div class="line"></div><div class="line">            <span class="comment">// Attempt to expand palindrome centered at i</span></div><div class="line">            <span class="keyword">while</span>( T[i+<span class="number">1</span>+P[i]] == T[i-<span class="number">1</span>-P[i]] )</div><div class="line">                P[i]++;</div><div class="line"></div><div class="line">            <span class="comment">// if palindrome centered at i expand past R</span></div><div class="line">            <span class="comment">// adjust center based on expanded palindrome</span></div><div class="line">            <span class="keyword">if</span> ( i + P[i] &gt; R) {</div><div class="line">                C = i;</div><div class="line">                R = i + P[i];</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> centerIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n-<span class="number">1</span> ; i++) {</div><div class="line">            <span class="keyword">if</span> (P[i] &gt;  maxLen) {</div><div class="line">                maxLen = P[i];</div><div class="line">                centerIndex = i;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">int</span> beginIndex = (centerIndex-<span class="number">1</span>-maxLen)/<span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s.substring(beginIndex, beginIndex+maxLen);</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>最近在研究算法，今天重点学习了一下Manacher算法（俗称“马拉车”算法，也即<a href="http://en.wikipedia.org/wiki/Longest_palindromic_substring" target="_blank" rel="external">最长回文子串问题</a>的最佳解法），不禁为算法发明者拍案叫绝。算法的精巧之处在于充分利用了原问题的关键信息：回文串。</p>
<p>前段时间参加了<a href="http://weibo.com/julyweibo" target="_blank" rel="external">July</a>组织的算法班，遗憾的是当时算法的基础并不好没听透，所以现在只好重听一下邹博的讲课录音，听完之后似乎明白又似乎不太明白，囧。把原C++程序改成成Java代码之后，Exception退出，囧++。智商已成事实，只好使用网络搜索大法，力求加深理解。在找了一些博客之后，略感失望，可能不是人家讲得不清楚，而是自己理解能力有限吧，不过为了参考方便，还是列举如下：<br>]]></summary>
    
      <category term="algorithms" scheme="http://hongbinzuo.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Understanding Spring]]></title>
    <link href="http://hongbinzuo.github.io/2014/08/06/Understand-Spring/"/>
    <id>http://hongbinzuo.github.io/2014/08/06/Understand-Spring/</id>
    <published>2014-08-06T15:08:50.000Z</published>
    <updated>2014-08-13T12:13:51.000Z</updated>
    <content type="html"><![CDATA[<p>今天在公司做了一个Spring入门的介绍，感觉思路值得总结一下，可能对于以后深入理解类似主题有些帮助。</p>
<p>在多年以前的一个公司，我曾经参与过一段时间的Java企业应用开发，如果没有记错的话，应该是电信工单运维类的项目。我那时还比较青涩，对于Java企业开发以及相关框架和架构都理解的不深。当时组里有个架构师，是他主持了开发的设计决策，应该选的就是Struts/Spring/Hibernate这个经典组合。但是，项目持续的时间并不长，再加之任务繁杂，而我主要负责写前端页面实现，所以对于这些框架开发的精髓也并没有特别深入的了解，有点遗憾。但就是在这个项目，我认识的这位架构师，非常推荐阎宏的书《Java与模式》，所以我听从他的建议买了这本书，我的评价是：如果用Java语言做面向对象设计，这本书到现在依然有较高的阅读价值。</p>
<a id="more"></a>

<p>再往前的话，我的经验也仅限于写Java应用以及Servlet和JSP，所以总体上对于Java企业应用的开发经验确实有限。</p>
<p>这几年公司内部有些机会用Java开发Web类或移动类项目，Spring就能派上用场了。不过，事情总有两面性，项目开发的时候因为时间紧任务重，虽然通过网络学习到一些快餐式的知识并迅速应用到项目中去，但是往往系统性的理解并不够。趁着现在有一点时间，我索性把《Java EE 6 Tutorial（Basics）》（英文版）和《Spring in action》（第三版，中文）看完了，同时也看了一本叫《Servlet/JSP笔记》的书复习一下Servlet和JSP。在这三本书的基础上，我又通过搜索引擎，以及Slideshare和Stackoverflow等网站寻找合适的讲解材料，最后促成了三个介绍性的讲解：Java EE入门，Servlet/JSP/JDBC介绍以及Spring入门。</p>
<p>这三个讲解风格不一样，具体到Spring的讲解，我是今天上午写的Slides，下午讲。写Slides就是厘请思路，也就是用Powerpoint描述出讲解的主线。Spring的思想现在理解起来并不复杂，但是要把这些思想串起来还是需要费一点功夫，昨天下午我已经在开始想，今天上午动笔，下午讲解，还算顺利。只是讲解的东东可能不够生动丰满，下次争取提高。以下是基本思路：</p>
<ul>
<li>重新看完《Spring in action》的第一章，然后用关键词描述出Spring的历史、出现的原因以及想要解决的问题</li>
<li>同时在《Spring in action》书中找到Spring的四条关键策略，个人认为这是理解Spring框架的要领</li>
<li>在Slideshare上寻找合适的材料，最终从中挑选出3个左右</li>
<li>展开Spring，主要分为DI和AOP，针对DI和AOP分别寻找合适的材料</li>
<li>DI：因为之前了解过DI，这次是复习，所以讲解起来没又太大障碍，只是补充一些DI的周围知识</li>
<li>AOP：这个方面了解的不多，因为只讲思想，所以还能蒙混过关，同时找到了一个Slides讲的不错，可以作为以后进阶的参考</li>
<li>另外想到，如果直接讲DI又有点仓促，所以又加上面向对象设计的原则和一些相关的设计模式作为背景补充</li>
<li>这次主要是入门介绍，所以不涉及Spring的太多细节，细节以参考资料的方式给出</li>
</ul>
<p>至此，基本主线完成。至于后续的学习和分享，则需要更多的实操以加深理解。是以为记。</p>
]]></content>
    <summary type="html"><![CDATA[<p>今天在公司做了一个Spring入门的介绍，感觉思路值得总结一下，可能对于以后深入理解类似主题有些帮助。</p>
<p>在多年以前的一个公司，我曾经参与过一段时间的Java企业应用开发，如果没有记错的话，应该是电信工单运维类的项目。我那时还比较青涩，对于Java企业开发以及相关框架和架构都理解的不深。当时组里有个架构师，是他主持了开发的设计决策，应该选的就是Struts/Spring/Hibernate这个经典组合。但是，项目持续的时间并不长，再加之任务繁杂，而我主要负责写前端页面实现，所以对于这些框架开发的精髓也并没有特别深入的了解，有点遗憾。但就是在这个项目，我认识的这位架构师，非常推荐阎宏的书《Java与模式》，所以我听从他的建议买了这本书，我的评价是：如果用Java语言做面向对象设计，这本书到现在依然有较高的阅读价值。</p>
]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://hongbinzuo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A little Emacs]]></title>
    <link href="http://hongbinzuo.github.io/2014/08/05/A-little-Emacs/"/>
    <id>http://hongbinzuo.github.io/2014/08/05/A-little-Emacs/</id>
    <published>2014-08-05T15:54:23.000Z</published>
    <updated>2014-08-06T16:09:13.000Z</updated>
    <content type="html"><![CDATA[<p>最近看了《程序员的呐喊》，对我的影响可能比较大，Steve对于Lisp和Emacs的推崇使我不得不重新审视自己之前的一些观点。我也尝试着说服自己花一点时间来做些实验，看看自己学习了某些传说中的工具，到底会产生什么样的影响。工具只是工具，这句话在大部分情况下是适用的，只是对于Emacs这个神一样的编辑器来说，是否适用呢？带着这个问题，我开始了我的Emacs之旅。</p>
<a id="more"></a>

<p>首先，Emacs在Windows上并不好玩，于是我把电脑系统换成了Ubuntu 14.04，并使用Emacs 24来学习。我使用的是陈冰写的一篇关于Emacs的博客《用一年的时间掌握Emacs》，看来我自己已经很有决心的样子，加油！</p>
<p>我挑了一个周六的下午，按照Emacs的内置教程熟悉了Emacs的基本操作，包括光标移动、文件操作、查找等常用文本命令，感觉还不错，有点当初学习五笔字型的兴奋感（遗憾的是，五笔字型我已经全忘了，更遗憾的是，那天学习之后，一多半的命令也忘掉了）。随后，做了一些基本文本的练习之后顿感无聊：有Sublime和各种免费强大的IDE不用，干嘛花时间受这个罪？呃，既然已经开始，就当学习一种新技术，也许真的是“磨刀不误砍柴工”呢？忍了一下，找到了一个能够激励我学下去的方式：学习Org Mode的使用，也就是使用Emacs的<a href="http://orgmode.org/" target="_blank" rel="external">Org</a>来做笔记。于是，我在看完Org作者的一个视频教程之后，开始练习使用Org（哦，Evernote又哭了）。</p>
<p>Org的使用并不是很顺畅，毕竟鼠标点点、GUI操作的习惯已经深入骨髓，真的不是一天两天能改的。但是，我硬着头皮，开始慢慢习惯。到目前为止，只能说Org我只掌握了皮毛，不过，好消息是我还没有厌烦。所以，我会接着使用Org，直到熟练掌握为止。</p>
<p>其次，我也尝试着恢复博客的写作，虽然有点困难，但是最近在看李笑来的书《把时间当作朋友》，书中提到他每天写一篇高质量的博客，我顿觉自己过于懒散：不是没有时间，只是时间可能都没有被高效利用罢了。而我的博客基本使用纯文本的Markdown写成，所以Emacs就是最好的工具了。当然，我不确定Emacs是否内置支持了Markdown语法，不过这也没有太大关系。</p>
<p>对于Emacs的配置，我觉得陈冰讲的很对，刚开始不要花太多时间自己摸索，直接照搬高手的配置就可以了。于是，我顺藤摸瓜，用了Steve Purcell的配置。基本体验还不错，以后如果觉得不够用再改。</p>
<p>所以，目前Emacs主要用来写Org笔记和Markdown博客，也会经常编辑一些小的文本。现在的配置对于前端支持不错，不过我现在也没有太多时间写前端代码，因此体会不深。对于一般的Java项目开发，目前还是乖乖地用IDE比较好，感觉Emacs对Java支持的可能不够好，虽然也有JDE插件，但应该和IntelliJ相比还是有差距的。无论如何，我已经开始了Emacs之旅，希望用一段相对较长的时间，跨过小的磕磕绊绊，逐渐达到一个相对较高的使用水平。</p>
]]></content>
    <summary type="html"><![CDATA[<p>最近看了《程序员的呐喊》，对我的影响可能比较大，Steve对于Lisp和Emacs的推崇使我不得不重新审视自己之前的一些观点。我也尝试着说服自己花一点时间来做些实验，看看自己学习了某些传说中的工具，到底会产生什么样的影响。工具只是工具，这句话在大部分情况下是适用的，只是对于Emacs这个神一样的编辑器来说，是否适用呢？带着这个问题，我开始了我的Emacs之旅。</p>
]]></summary>
    
      <category term="Emacs" scheme="http://hongbinzuo.github.io/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[It's complex]]></title>
    <link href="http://hongbinzuo.github.io/2014/08/04/Its-complex/"/>
    <id>http://hongbinzuo.github.io/2014/08/04/Its-complex/</id>
    <published>2014-08-04T15:33:08.000Z</published>
    <updated>2014-08-05T16:39:16.000Z</updated>
    <content type="html"><![CDATA[<p>事情有点复杂，不知道从哪里说起。因为没什么主题，索性就叫杂感吧。</p>
<p>这段时间又重新学起了Java EE的知识，算作是之前一直没有认真了解的一个代价吧。一个礼拜多的时间看完了Java EE 6 Tutorial，也把有些典型的例子看了看，这次的感觉是原来Java EE还算好，没有想象的沉重，尤其是EJB，新的版本3.1已经算是轻量级的开发技术了。也从网上看了一些评论，主要是Java EE和Spring的比较，如果真的做一个新的企业应用项目，可能还是有点难以取舍。Spring的发展很快，现在已经出到4.0，而Java EE也并不示弱，现在已经有了Java EE 7。从历史上来看，Java EE在较早的版本名声不好，因为过于沉重了，所以Spring顺理成章地赢得了很大的市场，所以现在Java EE想要赢回这场持久战，还真得需要点耐心。一般来说，因为Spring并不受JCP的控制，所以在应用先进思想方面要更敏捷一些，而Java EE涵盖多个JSR的标准更新需要协调各方意见，步调怕是要略显迟缓。另外，Spring集成其他框架的灵活性是Java EE难以比拟的。所以，可能需要考察开发项目的特性，充分了解两种主要框架的能力和缺陷，以作判断。最后一句，Java EE因为包含很多标准来适配企业开发的方方面面，但并不见得在实际的项目都能用到，所以还是要量体裁衣，不要过多的Upfront Design。</p>
<a id="more"></a>

<p>所以还是要敏捷。说道敏捷，自然就得说生产力。前两天看了一篇文章叫《<a href="http://ourjs.com/detail/53dbb5292ee109090700000c" target="_blank" rel="external">痛苦的Java程序员</a>》，其实人家英文根本就没有痛苦一说，只是译者给加上了，不过文章本身确实传递着一种痛苦的情绪，而且最近我确实也觉得Java有点罗嗦了。文中提到的比较重要的两句话，当然稍显偏激，不过也能代表了有些Java程序员的一种感觉：</p>
<blockquote>
<p>每个人都把自己想像成架构师。我在阅读代码的时侯感觉他们不是在解决问题，而是在计划问题。<br>Java也迫使一种高水平的形式主义和冗长啰嗦的东西在开发者身上显现。</p>
</blockquote>
<p><a href="http://zh.wikipedia.org/wiki/Java" target="_blank" rel="external">Java</a>也出现了近20年了，一种语言在出现20年之后还能在语言流行度排行榜上排名前三也算是非常成功了。不得不说，Java的面向对象与简洁性在当初的语言中脱颖而出，C++太复杂了，C很简洁，但是和Java所关注的领域不一样。Smalltalk会觉得很冤，但是套用Steve Yeggie的话说，Java人家那广告做的好啊，你没辙。所以，时势早英雄，Java胜出。Java在跨平台、互联网应用、企业应用中表现优异，并且最近几年延伸到移动平台的Android，更使这种强类型语言大放异彩。随着Java虚拟机的不断优化，它的性能已经仅次于C/C++，所以它的成功也绝非偶然。</p>
<p>但是Java确实接近中年，老成持重，但也有点过于笨拙。Java冗长的语法在Ruby和Scala面前确实有点不好意思。所以有人说，雇一个Ruby程序员可以干三个Java程序员的活，这话在一定程度上不错。但是，语言各有所长，以己之长攻彼之弱，必然易于取胜，所以选择语言方面更要多加考虑，而不是人云亦云。我的感受是，企业应用或性能要求较高的互联网后台应用还是用Java比较好，而轻量级的网站用Ruby配合Rails则是上佳之选。之前我写过一些关于Scala语言的博客，个人比较喜欢Scala，因为它的好处在于揉合了面向对象编程和函数式编程两种范式，同时又更加简洁轻盈，再配合Play!以及Akka框架的支持，真如同如虎添翼。看好Scala的发展，但并不代表现在Scala有足够的市场，尤其在国内，过于冷门的语言可能会对就业造成不便。另外，Scala复杂的语法学习起来确实比Java困难，所以流行起来真不太容易。</p>
<p>下面有几条Java和Ruby语言的比较仅供参考：</p>
<p><a href="https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-java/" target="_blank" rel="external">https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-java/</a><br><a href="http://carlosbecker.com/posts/twitter-drops-ruby-bullshit/" target="_blank" rel="external">http://carlosbecker.com/posts/twitter-drops-ruby-bullshit/</a><br><a href="http://a-developer-life.blogspot.com/2013/03/ruby-vs-java.html" target="_blank" rel="external">http://a-developer-life.blogspot.com/2013/03/ruby-vs-java.html</a><br><a href="http://www.tuicool.com/articles/ZrQBbu" target="_blank" rel="external">http://www.tuicool.com/articles/ZrQBbu</a><br><a href="http://stackoverflow.com/questions/442216/java-or-python-or-ruby-for-web-application" target="_blank" rel="external">http://stackoverflow.com/questions/442216/java-or-python-or-ruby-for-web-application</a><br><a href="http://stackoverflow.com/questions/5083292/playframework-vs-ruby-on-rails" target="_blank" rel="external">http://stackoverflow.com/questions/5083292/playframework-vs-ruby-on-rails</a><br><a href="http://blog.codinghorror.com/why-ruby/" target="_blank" rel="external">http://blog.codinghorror.com/why-ruby/</a></p>
<p>如果有机会，还是多看一些优秀的源码，并多参与比较有代表性的应用开发，以体会语言的优势以及解决问题的方式。讨论厘清思路固然重要，但是对于语言的使用其实是存在很多误解的，所以上手实践不失为一个好的鉴别方法。最后，非常推荐Steve Yeggie的《程序员的呐喊》，里面讲了很多关于程序设计的方方面面，喜欢编程的同学一定要入一本！</p>
<p>太晚了，扯到这里，晚安！</p>
]]></content>
    <summary type="html"><![CDATA[<p>事情有点复杂，不知道从哪里说起。因为没什么主题，索性就叫杂感吧。</p>
<p>这段时间又重新学起了Java EE的知识，算作是之前一直没有认真了解的一个代价吧。一个礼拜多的时间看完了Java EE 6 Tutorial，也把有些典型的例子看了看，这次的感觉是原来Java EE还算好，没有想象的沉重，尤其是EJB，新的版本3.1已经算是轻量级的开发技术了。也从网上看了一些评论，主要是Java EE和Spring的比较，如果真的做一个新的企业应用项目，可能还是有点难以取舍。Spring的发展很快，现在已经出到4.0，而Java EE也并不示弱，现在已经有了Java EE 7。从历史上来看，Java EE在较早的版本名声不好，因为过于沉重了，所以Spring顺理成章地赢得了很大的市场，所以现在Java EE想要赢回这场持久战，还真得需要点耐心。一般来说，因为Spring并不受JCP的控制，所以在应用先进思想方面要更敏捷一些，而Java EE涵盖多个JSR的标准更新需要协调各方意见，步调怕是要略显迟缓。另外，Spring集成其他框架的灵活性是Java EE难以比拟的。所以，可能需要考察开发项目的特性，充分了解两种主要框架的能力和缺陷，以作判断。最后一句，Java EE因为包含很多标准来适配企业开发的方方面面，但并不见得在实际的项目都能用到，所以还是要量体裁衣，不要过多的Upfront Design。</p>
]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="Ruby" scheme="http://hongbinzuo.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Appfuse (2)]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/28/appfuse-(2)/"/>
    <id>http://hongbinzuo.github.io/2014/03/28/appfuse-(2)/</id>
    <published>2014-03-28T01:09:15.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>书接上文。</p>
<p>Eclipse里编译成功之后，下一个要执行的任务是下载Appfuse的全部源码。按照官网的方法就是一条命令，很简单：<code>mvn appfuse:full-source</code>，但实际的过程往往并不顺利。</p>
<p>首先要注意的是，在下载源码之前不要修改pom.xml，否则可能遇到一些奇怪的问题。</p>
<a id="more"></a>

<h3 id="代理问题">代理问题</h3>
<p>在下载源码的过程中，遇到了几个Connection Time Out的问题，所以要注意设置系统的代理、Maven的代理和SVN的代理。具体命令如下，其中系统环境的代理是否设置根据自己的网络情况而定：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">D:\appfuse-demo&gt;</span> set http_proxy=<span class="constant">PROXY_HOST</span><span class="symbol">:PROXY_PORT</span></span></div><div class="line"><span class="input"><span class="prompt"></span></span></div><div class="line">D:\appfuse-demo&gt; set https_proxy=<span class="constant">PROXY_HOST</span><span class="symbol">:PROXY_PORT</span></div><div class="line"><span class="input"><span class="prompt"></span></span></div><div class="line">D:\appfuse-demo&gt; set <span class="constant">MAVEN_OPTS</span>=-<span class="constant">Dhttp</span>.proxyHost=<span class="constant">PROXY_HOST</span> -<span class="constant">Dhttp</span>.proxyPort=<span class="constant">PROXY_PORT</span> -<span class="constant">Dhttps</span>.proxyHost=<span class="constant">PROXY_HOST</span> -<span class="constant">Dhttps</span>.proxyPort=<span class="constant">PROXY_PORT</span></div></pre></td></tr></table></figure>

<p>SVN的连接超时问题，需要设置SVN的代理，即修改server配置文件，这个文件一般存放在<code>%APPDATA%\Subversion</code>下，其中有很多注释的配置，打开代理这一项设置即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">[global]</span></div><div class="line"><span class="setting">http-proxy-host = <span class="value">ProxyServerHost</span></span></div><div class="line"><span class="setting">http-proxy-port = <span class="value">Port</span></span></div></pre></td></tr></table></figure>

<p>如果出现错误，在Eclipse里重新保存pom.xml，也就是恢复成原始的pom.xml，错误就可以去除。吐槽：各种代理设置是最烦人滴，你们就不能都用操作系统或浏览器的网络代理吗？</p>
<h3 id="小错误">小错误</h3>
<p>为了避免文件更新冲突，我关闭了Eclipse中的项目，在配好一切代理的情况下下载，总体是成功的，只是有一个文件hibernate.properties需要手动删除。</p>
<h3 id="Jetty插件">Jetty插件</h3>
<p>full-source下载成功之后，可以通过命令行的方式运行Appfuse，运行命令是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">D:\appfuse-demo&gt;</span> mvn <span class="symbol">jetty:</span>run</span></div></pre></td></tr></table></figure>

<p>但是没有Jetty插件，需要下载，配置了Maven的settings.xml文件几次之后还是不能成功，找到这个Plugin的<a href="https://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin" target="_blank" rel="external">主页</a>，原来很简单，增加一个pluginGroup即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;profile&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">  &lt;pluginGroups&gt;</div><div class="line">    &lt;pluginGroup&gt;org.mortbay.jetty&lt;/pluginGroup&gt;</div><div class="line">  &lt;/pluginGroups&gt;</div><div class="line">&lt;/profile&gt;</div></pre></td></tr></table></figure>

<p>Jetty可以运行了不代表一切工作良好，下一篇会讲讲具体的编译和运行方法。</p>
<h3 id="M2E">M2E</h3>
<p>因为下载了全部源代码，Eclipse又得重新编译，哦，麦糕德～！使用Eclipse和m2e搭配工作最大的好处就是<strong>特别杀时间</strong>；如果你想高效，一定要谨慎注意你的每个操作，否则极有可能进入貌似有希望实则希望渺茫的漫长等待中。比如现在的这个例子：重新编译。在Eclipse里我尝试使用Maven/Update Project的方式更新依赖，重建项目，最后可耻地失败了。我想，重头来可能更靠谱，于是删除现有项目，然后重新导入，还是有错，来回折腾真是能憋出内伤啊。于是想到一不做二不休，干脆不用内嵌的Maven来编译了，用刚弄好的命令行Maven就OK了。参考这篇Maven绝杀技巧：<a href="http://stackoverflow.com/questions/6111408/maven2-missing-artifact-but-jars-are-in-place" target="_blank" rel="external">missing artifact but jars are in place</a>。我们用到了<a href="http://books.sonatype.com/m2eclipse-book/reference/preferences.html#fig-preferences-maven-installations" target="_blank" rel="external">这个技巧</a>，使用外部Maven管理依赖，经过反复Update之后，一切终于安静了。</p>
<p>为了庆祝这个阶段性成果，我果断消灭了两个枇杷！</p>
<p>且听下回分解。</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li>文中有些内容参考这篇博客，表示感谢：<a href="http://hi.baidu.com/imlidapeng/item/6ff00536ea0107ffa884288a" target="_blank" rel="external">飞哥也是哥</a>。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>书接上文。</p>
<p>Eclipse里编译成功之后，下一个要执行的任务是下载Appfuse的全部源码。按照官网的方法就是一条命令，很简单：<code>mvn appfuse:full-source</code>，但实际的过程往往并不顺利。</p>
<p>首先要注意的是，在下载源码之前不要修改pom.xml，否则可能遇到一些奇怪的问题。</p>
]]></summary>
    
      <category term="appfuse" scheme="http://hongbinzuo.github.io/tags/appfuse/"/>
    
      <category term="maven" scheme="http://hongbinzuo.github.io/tags/maven/"/>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Appfuse (1)]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/27/appfuse-in-eclipse/"/>
    <id>http://hongbinzuo.github.io/2014/03/27/appfuse-in-eclipse/</id>
    <published>2014-03-27T13:21:41.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>以前也用过Appfuse，不过一直也没怎么深入，最近又有机会玩一玩儿，顺便记录一下。</p>
<p><a href="http://appfuse.org/display/APF/Home" target="_blank" rel="external">Appfuse</a>是一个很有意思的项目，可以把它看成是Java企业应用开发的一个最佳实践集合。在Maven的帮助下，可以生成基于Struts，Spring MVC或者Wicket等一些框架的组合，这样就免去了最初搭建脚手架（Scaffolding）的过程。这在Play Framework和Grails出现之前应该算是比较方便的，再加上作者Matt Raible（他的<a href="http://raibledesigns.com/" target="_blank" rel="external">博客地址</a>）本身在Java圈子里也有小有名气，所以这个项目还是有一定人气的。今天看了一下，最新版的Appfuse 3.0已经支持Spring 4和Java 7/Maven 3（最低要求）了，可见人家也是与时俱进的，我们就来尝试一把。</p>
<a id="more"></a>

<p>根据<a href="http://appfuse.org/display/APF/AppFuse+QuickStart" target="_blank" rel="external">快速开始文档</a>，可以很快地下载项目。我选择使用Spring MVC，具体命令如下，其中的groupId和artifactId要换成自己项目的组织和名称：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mvn archetype:generate -B <span class="variable">-DarchetypeGroupId=</span></div><div class="line">org.appfuse.archetypes <span class="variable">-DarchetypeArtifactId=</span>appfuse-modular-spring-archetype -D</div><div class="line"><span class="variable">archetypeVersion=</span><span class="number">3.0</span>.<span class="number">0</span> <span class="variable">-DgroupId=</span>com.mydemo <span class="variable">-DartifactId=</span>demo -DarchetypeR</div><div class="line"><span class="variable">epository=</span>http://oss.sonatype.org/content/repositories/appfuse</div></pre></td></tr></table></figure>

<p>执行这条命令的条件是下载了Maven 3，并配置了Maven的执行路径，可以通过如下命令检查：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn -<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>下载完成之后，我选择先在Eclipse中编译，使用导入Maven项目的方式将源码导入，此时遇到了三个错误。</p>
<p>第一个错误的具体信息如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin execution <span class="keyword">not</span> covered by lifecycle <span class="keyword">configuration</span>: org.codehaus.mojo:hibernate3-maven-plugin:<span class="number">2.2</span>:hbm2ddl (execution: <span class="keyword">default</span>, phase: <span class="keyword">process</span>-test-resources)</div></pre></td></tr></table></figure>

<p>谷歌搜索错误的解决方法, 可以参考下面两个帖子：</p>
<ul>
<li><a href="http://appfuse.547863.n4.nabble.com/POM-td4655717.html" target="_blank" rel="external">http://appfuse.547863.n4.nabble.com/POM-td4655717.html</a></li>
<li><a href="http://wiki.eclipse.org/M2E_plugin_execution_not_covered" target="_blank" rel="external">http://wiki.eclipse.org/M2E_plugin_execution_not_covered</a></li>
</ul>
<p>文章实在比较冗长，m2e的wiki里面讲了三种方法，我采取了quick fix，选择忽略。</p>
<p>第二个错误是在sample-data.xsd文件中报错：</p>
<figure class="highlight Content"><figcaption><span>is not allowed in prolog```，</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">尝试了网上说的把文件存成ASNI格式，不成；试验了其他方法也不成，文件本身都是乱码。</div><div class="line">因为Appfuse开放源码，所以我直接找到这个文件把内容拷贝过来就好了，从文件头定义可以看出来它是UTF-16编码，所以肯定Windows系统加了什么乱糟糟的东西，参考[<span class="link_label">这篇博客</span>](<span class="link_url">http://blog.csdn.net/zhaoxu0312/article/details/8511792</span>)。sample-data.xsd源码的[<span class="link_label">位置</span>](<span class="link_url">https://github.com/appfuse/appfuse/blob/34dc1599636e15ab9e0372d67542321e25f1896c/web/common/src/test/resources/sample-data.xsd</span>)。</div><div class="line"></div><div class="line">第三个错误是文件default.jsp中报错：</div></pre></td></tr></table></figure>

<p>syntax error on token “ne” invalid Assignmentoperator```。这个错误很奇怪，搜索一下找不到答案，而且我印象比较深，这个以前遇到过。后来随便改了改ne这个字符串，然后再改回来，最后使用Maven - Update Project，居然就好了。所以，Eclipse里面有些莫名其妙的问题可以通过Close/Reopen Project或者Update/Refresh Project来解决，呵呵。</p>
<p>这篇博客主要记录了初次使用的Appfuse 3.0的一点体验，和遇到问题的一些解决方法，下一篇会讲讲编译运行的方法。</p>
<p>BTW</p>
<ul>
<li>Appfuse采用Apache 2的<a href="http://static.appfuse.org/license.html" target="_blank" rel="external">license</a>，无论对开源软件还是商业化软件都是友好的。</li>
<li>在Stackoverflow上看到了相似的问题，回答了一下下：<a href="http://stackoverflow.com/questions/22521568/errors-in-spring-mvc-appfuse-app-in-eclipse/22687468#22687468" target="_blank" rel="external">地址</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>以前也用过Appfuse，不过一直也没怎么深入，最近又有机会玩一玩儿，顺便记录一下。</p>
<p><a href="http://appfuse.org/display/APF/Home" target="_blank" rel="external">Appfuse</a>是一个很有意思的项目，可以把它看成是Java企业应用开发的一个最佳实践集合。在Maven的帮助下，可以生成基于Struts，Spring MVC或者Wicket等一些框架的组合，这样就免去了最初搭建脚手架（Scaffolding）的过程。这在Play Framework和Grails出现之前应该算是比较方便的，再加上作者Matt Raible（他的<a href="http://raibledesigns.com/" target="_blank" rel="external">博客地址</a>）本身在Java圈子里也有小有名气，所以这个项目还是有一定人气的。今天看了一下，最新版的Appfuse 3.0已经支持Spring 4和Java 7/Maven 3（最低要求）了，可见人家也是与时俱进的，我们就来尝试一把。</p>
]]></summary>
    
      <category term="appfuse" scheme="http://hongbinzuo.github.io/tags/appfuse/"/>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Play做Build的小坑儿一枚]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/25/a-small-compatability-issue-of-plays-sbt/"/>
    <id>http://hongbinzuo.github.io/2014/03/25/a-small-compatability-issue-of-plays-sbt/</id>
    <published>2014-03-25T13:44:38.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>在看《Play for Scala》，跟着做点小练习。</p>
<h3 id="小坑儿">小坑儿</h3>
<p>第二章给出了一个比较全面的Web应用，这个应用在显示详情页面的时候，需要依赖外部库，所以需要更新构建脚本。书里提到的是用<code>project/Build.scala</code>这个文件，结果出现编译错误，大意是<code>Build.scala</code>应该是有对象或类的定义的，明显是把它当成普通的Scala文件了，这很奇怪。</p>
<a id="more"></a>

<p>在网上找找，翻到Play 2.2.x<a href="http://www.playframework.com/documentation/2.2.x/Build" target="_blank" rel="external">关于构建的文档</a>，没有提到<code>Build.scala</code>这个文件，所以问题的根源可能是在Play 2.0（或SBT的早期版本）的时候曾经支持过<code>Build.scala</code>，而现在最新的不支持了，当然这只是个猜想。</p>
<h3 id="解决方法">解决方法</h3>
<p>把下面这段配置（清单1）放到<code>project/build.sbt</code>中去（清单2）：</p>
<h5 id="清单-1">清单-1</h5>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">val appDependencies = Se<span class="string">q(</span></div><div class="line">"net.sf.barcode4j" % "barcode4j" % "2.0"</div><div class="line">)</div></pre></td></tr></table></figure>

<h5 id="清单-2">清单-2</h5>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">libraryDependencies</span> += <span class="string">"net.sf.barcode4j"</span> % <span class="string">"barcode4j"</span> % <span class="string">"2.0"</span></div></pre></td></tr></table></figure>

<p>当然，翻墙还是不可避免的，要不然下载不了Maven的库。</p>
]]></content>
    <summary type="html"><![CDATA[<p>在看《Play for Scala》，跟着做点小练习。</p>
<h3 id="小坑儿">小坑儿</h3>
<p>第二章给出了一个比较全面的Web应用，这个应用在显示详情页面的时候，需要依赖外部库，所以需要更新构建脚本。书里提到的是用<code>project/Build.scala</code>这个文件，结果出现编译错误，大意是<code>Build.scala</code>应该是有对象或类的定义的，明显是把它当成普通的Scala文件了，这很奇怪。</p>
]]></summary>
    
      <category term="play!" scheme="http://hongbinzuo.github.io/tags/play!/"/>
    
      <category term="SBT" scheme="http://hongbinzuo.github.io/tags/SBT/"/>
    
      <category term="Scala" scheme="http://hongbinzuo.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A quick web application with SBT]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/19/a-quick-web-application-with-sbt/"/>
    <id>http://hongbinzuo.github.io/2014/03/19/a-quick-web-application-with-sbt/</id>
    <published>2014-03-19T11:18:01.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>In the chapter 6 of <em>Scala in action</em>, the author decides to show something concrete. The example is a web application that provide Kanban service. It’s called <strong>weKanban</strong>. In order to get this example to run, there’s something to do for project setup, Scala web development and database development and so on. Here I would like to briefly describe the procedure to get it working for current environment, because some libraries used by the example are outdated in the book.</p>
<a id="more"></a>

<p>The very first thing is sbt. In the previous example, the HTTP client sample, I did not follow the instruction to setup SBT(Simple Build Tool). Instead, I used Gradle and its jetty plugin. If this time I still insist on Gradle, then I may encounter some unexpected problem, so I have to turn the build tool to SBT to make it easy. Anyway, I need to learn SBT gradully, after all, SBT is the first choice for Scala programming.</p>
<p>The first step is to create the project skeleton for weKanban. This step really took me some time, and I think it is a bad idea to remove the support for project template since after SBT version 0.7, because none of the alternative ways is easy. There are actually three ways mentioned in <em>Scala in action</em>, one is <strong>np</strong>, one is <strong>giter8</strong>, and the last one is command. I tried them one by one and tried to fix the problems, but at last, I lost my patience and created the directory mannually. giter8 is still hard to setup, it requires <strong>conscript</strong> first and this conscript didn’t work after many attempts.. Even at last I installed it correctly, giter8 still cannot get the project template correctly. Although the author said giter8 nearly becomes the standard way to create Scala projects, I dont like it. </p>
<p>So, I end up with creating the project structure by hand. It looks like below,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ tree .</div><div class="line">.</div><div class="line">├── build.sbt</div><div class="line">├── lib</div><div class="line">├── project</div><div class="line">│   ├── build.properties</div><div class="line">│   ├── build.scala</div><div class="line">│   ├── plugins.sbt</div><div class="line">│   ├── project</div><div class="line">│   │   └── target</div><div class="line">│   └── target</div><div class="line">├── src</div><div class="line">│   ├── main</div><div class="line">│   │   ├── java</div><div class="line">│   │   ├── resourcs</div><div class="line">│   │   ├── scala</div><div class="line">│   │   │   └── weKanban.scala</div><div class="line">│   │   └── webapp</div><div class="line">│   │       ├── WEB-<span class="built_in">INF</span></div><div class="line">│   │       │   ├── target</div><div class="line">│   │       │   └── web.xml</div><div class="line">│   │       ├── css</div><div class="line">│   │       ├── index.html</div><div class="line">│   │       └── <span class="keyword">js</span></div><div class="line">│   ├── target</div><div class="line">│   └── <span class="keyword">test</span></div><div class="line">│       ├── java</div><div class="line">│       ├── resources</div><div class="line">│       └── scala</div><div class="line">└── target</div></pre></td></tr></table></figure>

<p>Note: all the directories named ‘target’ were genereated automatically by SBT, so dont create them manually.</p>
<p>The second step is to make sure SBT has been installed correctly and it works well with required plugins and libraries,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ sbt</div><div class="line">[info] Loading <span class="keyword">project</span> definition <span class="keyword">from</span> <span class="regexp">/Users/</span>admin<span class="regexp">/Scala/</span>projects<span class="regexp">/weKanban/</span><span class="keyword">project</span></div><div class="line">[info] Set current <span class="keyword">project</span> to weKanban (in build <span class="keyword">file</span>:<span class="regexp">/Users/</span>admin<span class="regexp">/Scala/</span>projects<span class="regexp">/weKanban/</span>)</div><div class="line">&gt; sbt-version</div><div class="line">[info] <span class="number">0.13</span>.<span class="number">1</span></div><div class="line">&gt; scala-version</div><div class="line">[info] <span class="number">2.10</span>.<span class="number">3</span></div></pre></td></tr></table></figure>

<p>The content of <em>build.sbt</em> is different from the original one in the book. It is shown as follows, the main difference is the Scala version, jetty’s dependency details and the xsbt webplugin path:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">name <span class="value">:= <span class="string">"weKanban"</span></span></div><div class="line"></div><div class="line">organization := <span class="string">"scalainaction"</span></div><div class="line"></div><div class="line">version := <span class="string">"0.1"</span></div><div class="line"></div><div class="line">scalaVersion := <span class="string">"2.10.0"</span></div><div class="line"></div><div class="line">scalacOptions ++= <span class="function">Seq</span>(<span class="string">"-unchecked"</span>, <span class="string">"-deprecation"</span>)</div><div class="line"></div><div class="line">libraryDependencies ++= <span class="function">Seq</span>(</div><div class="line">  <span class="string">"org.scalaz"</span> %% <span class="string">"scalaz-core"</span> % <span class="string">"6.0.3"</span>,</div><div class="line">  <span class="string">"org.scalaz"</span> %% <span class="string">"scalaz-http"</span> % <span class="string">"6.0.3"</span>,</div><div class="line">  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-webapp"</span> % <span class="string">"9.1.0.v20131115"</span> % <span class="string">"container"</span>,</div><div class="line">  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-plus"</span>   % <span class="string">"9.1.0.v20131115"</span> % <span class="string">"container"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function">seq</span>(com.earldouglas.xsbtwebplugin.WebPlugin.webSettings :_*)</div></pre></td></tr></table></figure>

<p>I also changed the content of <em>build.properties</em> to ensure it reflects the correctly used version,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sbt.version</span>=<span class="string">0.13.1</span></div></pre></td></tr></table></figure>

<p>And of course the content of <em>plugin.sbt</em> as below,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addSbtPlugin(<span class="string">"com.earldouglas"</span> % <span class="string">"xsbt-web-plugin"</span> % <span class="string">"0.7.0"</span>)</div></pre></td></tr></table></figure>

<p>After all these are set up, the simple web application can be started via SBT. Of course, you need follow the instructions of the book to copy the content of <em>web.xml</em> and <em>index.html</em> and most importantly the file <em>weKanban.scala</em>. I’d ignore the first two and only list the content of the scala source file to illustrate its usage of Scalaz library in order to implement a simple Servlet,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.kanban.application</div><div class="line"></div><div class="line"><span class="keyword">import</span> scalaz._</div><div class="line"><span class="keyword">import</span> Scalaz._</div><div class="line"><span class="keyword">import</span> scalaz.http._</div><div class="line"><span class="keyword">import</span> response._</div><div class="line"><span class="keyword">import</span> request._</div><div class="line"><span class="keyword">import</span> servlet._</div><div class="line"><span class="keyword">import</span> HttpServlet._</div><div class="line"><span class="keyword">import</span> Slinky._</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WeKanbanApplication</span> <span class="keyword">extends</span> <span class="title">StreamStreamServletApplication</span> </span>{</div><div class="line">	<span class="keyword">val</span> application = <span class="keyword">new</span> ServletApplication[Stream, Stream] {</div><div class="line">		<span class="keyword">def</span> application(implicit servlet: HttpServlet, servletRequest: HttpServletRequest, request: Request[Stream]) = {</div><div class="line">			<span class="keyword">def</span> found(x: Iterator[Byte]): Response[Stream] = OK &lt;&lt; x.toStream</div><div class="line">			HttpServlet.resource(found, NotFound.xhtml)</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>So far so good. Given all the files are ready, we come to the third step: we can launch the web server now to show the result. Here the book author said ‘jetty-run’ command, I’d say it’s replaced with the command ‘container’ inside SBT like below, </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="symbol">container:</span>start</div><div class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">16</span><span class="symbol">:</span><span class="number">05</span><span class="symbol">:</span><span class="number">02</span>.091<span class="symbol">:INFO</span><span class="symbol">:oejs</span>.<span class="constant">Server</span><span class="symbol">:pool-</span><span class="number">6</span>-thread-<span class="number">4</span><span class="symbol">:</span> jetty-<span class="number">9.1</span>.<span class="number">0</span>.v20131115</div><div class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">16</span><span class="symbol">:</span><span class="number">05</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">102</span><span class="symbol">:INFO</span><span class="symbol">:oejw</span>.<span class="constant">StandardDescriptorProcessor</span><span class="symbol">:pool-</span><span class="number">6</span>-thread-<span class="number">4</span><span class="symbol">:</span> <span class="constant">NO</span> <span class="constant">JSP</span> <span class="constant">Support</span> <span class="keyword">for</span> /, did <span class="keyword">not</span> find org.apache.jasper.servlet.<span class="constant">JspServlet</span></div><div class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">16</span><span class="symbol">:</span><span class="number">05</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">106</span><span class="symbol">:INFO</span><span class="symbol">:oejsh</span>.<span class="constant">ContextHandler</span><span class="symbol">:pool-</span><span class="number">6</span>-thread-<span class="number">4</span><span class="symbol">:</span> <span class="constant">Started</span> o.e.j.w.<span class="constant">WebAppContext</span><span class="variable">@3d4dd7e7</span>{<span class="regexp">/,[file:/</span><span class="constant">Users</span>/admin/<span class="constant">Scala</span>/projects/weKanban/src/main/webapp/],<span class="constant">AVAILABLE</span>}</div><div class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">16</span><span class="symbol">:</span><span class="number">05</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">174</span><span class="symbol">:INFO</span><span class="symbol">:oejs</span>.<span class="constant">ServerConnector</span><span class="symbol">:pool-</span><span class="number">6</span>-thread-<span class="number">4</span><span class="symbol">:</span> <span class="constant">Started</span> <span class="constant">ServerConnector</span><span class="variable">@4def267d</span>{<span class="constant">HTTP</span>/<span class="number">1.1</span>}{<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">8080</span>}</div><div class="line">[success] <span class="constant">Total</span> <span class="symbol">time:</span> <span class="number">1</span> s, completed <span class="number">2014</span>-<span class="number">3</span>-<span class="number">19</span> <span class="number">16</span><span class="symbol">:</span><span class="number">05</span><span class="symbol">:</span><span class="number">03</span></div></pre></td></tr></table></figure>

<p>Finally let’s see the result:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ curl -i localhost:8080/index.html</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Length: 85</div><div class="line">Server: Jetty(9.1.0.v20131115)</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">h1</span>&gt;</span>weKanban board will come shortly<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>OK, so I ended learning this chapter and learned some knowledge about Scala web development and SBT. The next step is to read the next chapter and complete this example for some useful user stories.</p>
<h6 id="References">References</h6>
<ul>
<li><a href="http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html" target="_blank" rel="external">How to setup SBT</a></li>
<li><a href="https://github.com/earldouglas/xsbt-web-plugin/wiki" target="_blank" rel="external">xsbt web plugin</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>In the chapter 6 of <em>Scala in action</em>, the author decides to show something concrete. The example is a web application that provide Kanban service. It’s called <strong>weKanban</strong>. In order to get this example to run, there’s something to do for project setup, Scala web development and database development and so on. Here I would like to briefly describe the procedure to get it working for current environment, because some libraries used by the example are outdated in the book.</p>
]]></summary>
    
      <category term="Scala" scheme="http://hongbinzuo.github.io/tags/Scala/"/>
    
      <category term="SBT" scheme="http://hongbinzuo.github.io/tags/SBT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装Ubuntu 13.10虚拟机]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/18/install-vm-ubuntu-1310/"/>
    <id>http://hongbinzuo.github.io/2014/03/18/install-vm-ubuntu-1310/</id>
    <published>2014-03-18T13:29:02.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>倒腾Windows开发环境还是挺费劲的，尤其是经常使用开源软件的话。安装Cygwin神马的都烦了，还不如直接装个虚拟机。小伙伴前段时间装了一个，嘿嘿，这下方便了，按图索骥少费工夫，开装。</p>
<p>参考：<a href="http://youfei.github.io/2014/02/27/others-1/" target="_blank" rel="external">http://youfei.github.io/2014/02/27/others-1/</a></p>
<a id="more"></a>

<ol>
<li>下载VMWare Player：<a href="https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/6_0" target="_blank" rel="external">link1</a></li>
<li>下载Ubuntu镜像：<a href="http://www.ubuntu.com/download/zh-CN" target="_blank" rel="external">link2</a>，我下载的是13.10桌面版</li>
<li>设置启动安装不废话</li>
<li>启动之后提示错误，查了一下是我的HP笔记本默认关闭了虚拟机启动，进入BIOS，找到相关选项Enable即可，参考链接: <a href="http://h30434.www3.hp.com/t5/Other-Desktop-PC-Questions/Need-to-get-into-BIOS-setup-to-change-VT-setting/td-p/1278503" target="_blank" rel="external">link3</a></li>
<li>重新启动之后不能显示桌面，可能是在安装中出现了错误，使用下面的命令可以修复（参考链接：<a href="http://blog.sina.com.cn/s/blog_9ffceca50101g0st.html" target="_blank" rel="external">link4</a>）</li>
<li>最后一个问题，Ubuntu桌面不能全屏幕显示，需要安装VMWare Tools，参考：<a href="http://blog.csdn.net/woshicaixianfeng/article/details/6157407" target="_blank" rel="external">link5</a>。安装的过程可能不一定很顺利，要有耐心。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---- <span class="number">5</span>. 安装<span class="constant">Ubuntu</span>界面的命令 ----</div><div class="line"><span class="variable">$ </span>sudo apt-get install ubuntu-desktop</div><div class="line"><span class="variable">$ </span>reboot</div><div class="line"><span class="variable">$ </span>startx</div></pre></td></tr></table></figure>

<p>大功告成！玩儿去！</p>
]]></content>
    <summary type="html"><![CDATA[<p>倒腾Windows开发环境还是挺费劲的，尤其是经常使用开源软件的话。安装Cygwin神马的都烦了，还不如直接装个虚拟机。小伙伴前段时间装了一个，嘿嘿，这下方便了，按图索骥少费工夫，开装。</p>
<p>参考：<a href="http://youfei.github.io/2014/02/27/others-1/" target="_blank" rel="external">http://youfei.github.io/2014/02/27/others-1/</a></p>
]]></summary>
    
      <category term="Misc" scheme="http://hongbinzuo.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why Twitter Uses Java]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/14/why-twitter-uses-java/"/>
    <id>http://hongbinzuo.github.io/2014/03/14/why-twitter-uses-java/</id>
    <published>2014-03-14T15:49:28.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>Rails在Web应用快速开发方面几乎很少有框架能与之媲美，但是Rails的性能和系统架构的友好性和Java平台相比可能还是存在一定的劣势。大多数的Web应用，Rails是足能抵挡的，比如现在Github在用Rails，而Twitter以前也主要用Rails。但是Twitter毕竟是一个数一数二的高并发大流量的网站，所以它总会对性能有更高的要求。下面的译文段落来自InfoQ中的<a href="http://www.infoq.com/articles/twitter-java-use" target="_blank" rel="external">一篇访谈</a>，主要是讲Twitter是为什么迁移部分代码和服务到Java平台的。</p>
<a id="more"></a>

<h3 id="译文">译文</h3>
<p>我们原来是一个Rails商店，我相信我们是世界上最大的Rails站点，但是当我们成长为一个组织，并且提供服务的时候，性能和封装问题就日益凸显了。我并不是说Rails在哪方面做的不好，只是我们的系统增长地太快太大了，而Rails不能适应。在我们这种情况下Rails有两点不太理想。</p>
<p>首先，Ruby的运行时比较慢，特别是和Java虚拟机（JVM）比起来的话，虽然我们已经在垃圾收集器上努力地使其达到较高的性能了。</p>
<p>其次，Rails所实现的LAMP模型有好几层，每一层都和上下层相互通信，却没有垂直封装，这样的模型不能在我们这样的组织里提供较好的服务。</p>
<p>因为我们一直都比较关注性能和封装，我们也通过缓存（cache）或者优化虚拟机解决了必要的性能问题。</p>
<p>现在Twitter的大部分请求都走Rails，但是当我们构建新的服务时，如果是从头开始，为了达到更好的封装性我们把服务放到JVM里，因为性能方面的考虑要远远比这些语言的生产力或者敏捷性方面的弱势更重要。所以，当我们重新构建Tweet存储时，我们就把它构建到Gizzard里作为同种类型的服务，然后暴露一个领域接口，那是一个Scala系统，划分并管理MySQL节点。所以，这样就可以从核心的Rails软件包里有效地消除ActiveRecord的使用。</p>
<p>队列的情况也是一样的；当我们想重新构建并封装队列的时候，为了性能的考虑我们在JVM上实现。所以，当那些轻量级的、面向服务的项目开始的时候，我们越来越多地考虑从核心的Rails应用中脱离开来。</p>
<p>另一方面，当把渲染代码迁移到基于浏览器的Javascript中时，我们从Rails的构建网页的模板模型里就得不到什么好处了。所以，我们从两端剥离关注，并且当我们重写代码的时候，在更快的软件栈上就更合理一些，因为性能对我们来说太重要了。我们是世界上最大的网站之一，但是和其他大的动态站点相比我们只是在很少的硬件资源上运行。</p>
<h3 id="原文">原文</h3>
<blockquote>
<p>We were originally a Rails shop, and I believe we are the largest Rails site in the world, but as we’ve grown as an organization, and as a service, performance and encapsulation have become very critical. I wouldn’t say that Rails has served as poorly in any way, it’s just that we outgrew it very quickly. So there are two things about Rails that make it no longer ideal for our situation.<br>First, the Ruby runtime is slow, particularly in comparison to the JVM. We’ve worked hard on the garbage collector to get reasonable performance.</p>
<p>And also the LAMP model that Rails embodies, where you have a set of tiers each of which only talks to the one above and below, and no vertical encapsulation, doesn’t serve a large organization like us very well.</p>
<p>As we’ve been focusing on performance and encapsulation, we’ve fixed performance problems as necessary, with caches, or working on the VMs.</p>
<p>The majority of requests on Twitter go through Rails right now, but as we build new services, if we choose to build them from scratch, in order to achieve better encapsulation we move them into the JVM, because the performance concerns outweigh any sort of productivity or agility downside those languages might have. So when we re-built Tweet storage we built it in Gizzard as a homogenous service, it exposes a domain interface, and that’s a Scala system that partitions and manages uncoordinated MySQL nodes. So that effectively eliminated ActiveRecord use for tweets from the core Rails stack.</p>
<p>The same with the queue; when we wanted to rebuild it and re-encapsulate it for performance reasons we wrote it on JVM. So as those kind of lightweight, service-oriented projects proceed, more and more concerns are being taken out of the core Rails application.</p>
<p>On the opposite side, as we’ve moved the render code into browser-based JavaScript, we no longer get much benefit from Rails’ templating model for building web pages. So we’re pulling concerns out from both sides, and when rewrite them it makes sense to rewrite them in a faster stack, because performance is so critical for us. We’re one of the largest websites in the world, but run on a very small hardware footprint compared to other big dynamic sites.</p>
</blockquote>
]]></content>
    <summary type="html"><![CDATA[<p>Rails在Web应用快速开发方面几乎很少有框架能与之媲美，但是Rails的性能和系统架构的友好性和Java平台相比可能还是存在一定的劣势。大多数的Web应用，Rails是足能抵挡的，比如现在Github在用Rails，而Twitter以前也主要用Rails。但是Twitter毕竟是一个数一数二的高并发大流量的网站，所以它总会对性能有更高的要求。下面的译文段落来自InfoQ中的<a href="http://www.infoq.com/articles/twitter-java-use" target="_blank" rel="external">一篇访谈</a>，主要是讲Twitter是为什么迁移部分代码和服务到Java平台的。</p>
]]></summary>
    
      <category term="Java" scheme="http://hongbinzuo.github.io/tags/Java/"/>
    
      <category term="Scala" scheme="http://hongbinzuo.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala patterns (#6) - Kestrel combinator]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/04/kestrel-combinator/"/>
    <id>http://hongbinzuo.github.io/2014/03/04/kestrel-combinator/</id>
    <published>2014-03-04T04:25:31.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>Kestrel combinator并不是一种传统的设计模式，这个叫法是在1985年出版的<em>To Mock the Mockingbird</em>这本书里提到的，可以参考<em>Scala in action</em>作者引用的<a href="http://mng.bz/WKns" target="_blank" rel="external">资源地址</a>详细了解这种模式，其中的例子使用的是Ruby语言。我理解这种模式的意义主要是产生<strong>副作用</strong>，即在不改变原有类或对象定义的情况下，使用一段附加函数体来达到产生副作用的目的。</p>
<a id="more"></a>

<p>这种模式在不同的语言里实现的方式也不一样。下面的一个例子来自<em>Scala in action</em>，其中使用了Scala的隐式转换（Implicit Conversion）特性来实现Kestrel combinator：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Combinators</span> </span>{</div><div class="line">  implicit <span class="keyword">def</span> kestrel[A](a: A) = <span class="keyword">new</span> {</div><div class="line">    <span class="keyword">def</span> tap(sideEffect: A =&gt; Unit): A = {</div><div class="line">      sideEffect(a)</div><div class="line">      a</div><div class="line">    }</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Person</span><span class="params">(firstName: String, lastName: String)</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Mailer</span><span class="params">(mailAddress: String)</span> </span>{</div><div class="line">  <span class="keyword">def</span> mail(body: String) = { println(<span class="string">"Send mail here"</span> )}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">DemoKestrel</span> <span class="keyword">extends</span> <span class="title">App</span> </span>{</div><div class="line">  <span class="keyword">import</span> Combinators._</div><div class="line">  Person(<span class="string">"Nilanjan"</span>, <span class="string">"Raychaudhuri"</span>).tap(</div><div class="line">      p =&gt; {</div><div class="line">        println(<span class="string">"First name"</span> + p.firstName)</div><div class="line">        Mailer(<span class="string">"Some address"</span>)</div><div class="line">      }</div><div class="line">  ).lastName </div><div class="line">}</div></pre></td></tr></table></figure>

<p>这种模式具体用在什么场景下呢？再让我想想。。</p>
]]></content>
    <summary type="html"><![CDATA[<p>Kestrel combinator并不是一种传统的设计模式，这个叫法是在1985年出版的<em>To Mock the Mockingbird</em>这本书里提到的，可以参考<em>Scala in action</em>作者引用的<a href="http://mng.bz/WKns" target="_blank" rel="external">资源地址</a>详细了解这种模式，其中的例子使用的是Ruby语言。我理解这种模式的意义主要是产生<strong>副作用</strong>，即在不改变原有类或对象定义的情况下，使用一段附加函数体来达到产生副作用的目的。</p>
]]></summary>
    
      <category term="Scala" scheme="http://hongbinzuo.github.io/tags/Scala/"/>
    
      <category term="Design Patterns" scheme="http://hongbinzuo.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala resources]]></title>
    <link href="http://hongbinzuo.github.io/2014/03/03/scala-resources/"/>
    <id>http://hongbinzuo.github.io/2014/03/03/scala-resources/</id>
    <published>2014-03-03T15:05:29.000Z</published>
    <updated>2014-08-04T00:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>整理一下Scala的互联网学习资源，本文会持续更新。</p>
<a id="more"></a>

<h3 id="博客类">博客类</h3>
<h4 id="英文博客">英文博客</h4>
<ul>
<li><a href="http://blog.knoldus.com/category/scala-3/" target="_blank" rel="external">http://blog.knoldus.com/category/scala-3/</a> <font size="2">持续更新，来自实战，绝对有料</font></li>
<li><a href="http://www.codecommit.com/blog/category/scala" target="_blank" rel="external">http://www.codecommit.com/blog/category/scala</a> <font size="2">文章不少，内容丰富，于2010年底停止更新</font></li>
<li><a href="http://pavelfatin.com/category/scala-2/" target="_blank" rel="external">http://pavelfatin.com/category/scala-2/</a> <font size="2">文章不多，但有深度</font></li>
<li><a href="http://alvinalexander.com/search/node/scala" target="_blank" rel="external">http://alvinalexander.com/search/node/scala</a> <font size="2">持续更新，内容不错</font></li>
<li><a href="http://henkelmann.eu/scala" target="_blank" rel="external">http://henkelmann.eu/scala</a> <font size="2">博客用Lift搭建，并有Github的Scala项目</font></li>
<li><a href="http://daily-scala.blogspot.com/search/label/Scala" target="_blank" rel="external">http://daily-scala.blogspot.com/search/label/Scala</a> <font size="2">例子很多，已于2012年停止更新</font></li>
<li><a href="http://www.scalaloader.org/search/label/Scala" target="_blank" rel="external">http://www.scalaloader.org/search/label/Scala</a> <font size="2">文章不错，已于2013年3月停止更新</font></li>
<li><a href="http://scalasim.blogspot.com/" target="_blank" rel="external">http://scalasim.blogspot.com/</a> <font size="2">文章不多，已于2010年停止更新</font> </li>
<li><a href="http://memuser.blogspot.com/search/label/Scala" target="_blank" rel="external">http://memuser.blogspot.com/search/label/Scala</a> <font size="2">文章不多，仅供参考</font></li>
</ul>
<h4 id="中文博客">中文博客</h4>
<ul>
<li><a href="http://hongjiang.info/category/programming/scala/" target="_blank" rel="external">http://hongjiang.info/category/programming/scala/</a> <font size="2">阿里巴巴hongjiang的技术博客</font></li>
<li><a href="http://www.kaopua.com/blog/tags/scala" target="_blank" rel="external">http://www.kaopua.com/blog/tags/scala</a> <font size="2">诺铁的笔记</font></li>
<li><a href="http://hongbinzuo.github.io/tags/Scala/" target="_blank" rel="external">http://hongbinzuo.github.io/tags/Scala/</a> <font size="2">博主本人博客，持续更新</font></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>整理一下Scala的互联网学习资源，本文会持续更新。</p>
]]></summary>
    
      <category term="Scala" scheme="http://hongbinzuo.github.io/tags/Scala/"/>
    
  </entry>
  
</feed>
